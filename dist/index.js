(()=>{"use strict";var e={992:(e,n,t)=>{t.d(n,{A:()=>s});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([e.id,".game * {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.game h1 {\n  text-align: center;\n  margin: 2rem;\n}\n\n.game .boards h3 {\n  text-align: center;\n  margin: 1rem;\n  user-select: none;\n}\n\n.game .boards {\n  display: flex;\n  justify-content: center;\n  column-gap: 50px;\n}\n\n.game .board {\n  box-sizing: content-box;\n  display: flex;\n  flex-wrap: wrap;\n  width: 400px;\n  height: 400px;\n}\n\n.game .player.board,\n.computer.board {\n  flex: 0 1 400px;\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n}\n\n.game .cell {\n  flex: 0 0 40px;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.computer.board .cell:hover {\n  border: 1px solid darkorange;\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./src/styles/game.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;;EAEE,eAAe;EACf,2BAA2B;EAC3B,4BAA4B;AAC9B;;AAEA;EACE,cAAc;EACd,6BAA6B;EAC7B,8BAA8B;;EAE9B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,4BAA4B;EAC5B,eAAe;AACjB",sourcesContent:[".game * {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.game h1 {\r\n  text-align: center;\r\n  margin: 2rem;\r\n}\r\n\r\n.game .boards h3 {\r\n  text-align: center;\r\n  margin: 1rem;\r\n  user-select: none;\r\n}\r\n\r\n.game .boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  column-gap: 50px;\r\n}\r\n\r\n.game .board {\r\n  box-sizing: content-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.game .player.board,\r\n.computer.board {\r\n  flex: 0 1 400px;\r\n  border-top: 1px solid black;\r\n  border-left: 1px solid black;\r\n}\r\n\r\n.game .cell {\r\n  flex: 0 0 40px;\r\n  border-right: 1px solid black;\r\n  border-bottom: 1px solid black;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.computer.board .cell:hover {\r\n  border: 1px solid darkorange;\r\n  cursor: pointer;\r\n}\r\n"],sourceRoot:""}]);const s=a},247:(e,n,t)=>{t.d(n,{A:()=>s});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([e.id,"* {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nh1 {\n  text-align: center;\n  margin: 2rem;\n}\n\n.boards h3 {\n  text-align: center;\n  margin: 1rem;\n  user-select: none;\n}\n\n.boards {\n  display: flex;\n  justify-content: center;\n  column-gap: 50px;\n}\n\n.board {\n  box-sizing: content-box;\n  display: flex;\n  flex-wrap: wrap;\n  width: 400px;\n  height: 400px;\n}\n\n.player.board,\n.computer.board,\n.placeShip.board {\n  flex: 0 1 400px;\n  /* border: 1px solid black; */\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n\n  user-select: none;\n}\n\ndialog {\n  text-align: center;\n  background-color: ghostwhite;\n  margin: auto;\n  border: none;\n  outline: none;\n  padding: 50px;\n}\n\n.cell {\n  flex: 0 0 40px;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.greenColor {\n  background-color: green;\n}\n\n.definitelyPlaced {\n  background-color: darkgreen;\n}\n","",{version:3,sources:["webpack://./src/styles/modal.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;;;EAGE,eAAe;EACf,6BAA6B;EAC7B,2BAA2B;EAC3B,4BAA4B;;EAE5B,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,4BAA4B;EAC5B,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,aAAa;AACf;;AAEA;EACE,cAAc;EACd,6BAA6B;EAC7B,8BAA8B;;EAE9B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,2BAA2B;AAC7B",sourcesContent:["* {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  margin: 2rem;\r\n}\r\n\r\n.boards h3 {\r\n  text-align: center;\r\n  margin: 1rem;\r\n  user-select: none;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  column-gap: 50px;\r\n}\r\n\r\n.board {\r\n  box-sizing: content-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.player.board,\r\n.computer.board,\r\n.placeShip.board {\r\n  flex: 0 1 400px;\r\n  /* border: 1px solid black; */\r\n  border-top: 1px solid black;\r\n  border-left: 1px solid black;\r\n\r\n  user-select: none;\r\n}\r\n\r\ndialog {\r\n  text-align: center;\r\n  background-color: ghostwhite;\r\n  margin: auto;\r\n  border: none;\r\n  outline: none;\r\n  padding: 50px;\r\n}\r\n\r\n.cell {\r\n  flex: 0 0 40px;\r\n  border-right: 1px solid black;\r\n  border-bottom: 1px solid black;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.greenColor {\r\n  background-color: green;\r\n}\r\n\r\n.definitelyPlaced {\r\n  background-color: darkgreen;\r\n}\r\n"],sourceRoot:""}]);const s=a},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],d=i[c]||0,p="".concat(c," ").concat(d);i[c]=d+1;var u=t(p),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(A);else{var h=o(A,r);r.byIndex=s,n.splice(s,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var l=r(e,o),c=0;c<i.length;c++){var d=t(i[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=l}}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.nc=void 0;var r=t(72),o=t.n(r),i=t(825),a=t.n(i),s=t(659),l=t.n(s),c=t(56),d=t.n(c),p=t(540),u=t.n(p),A=t(113),h=t.n(A),g=t(992),f={};f.styleTagTransform=h(),f.setAttributes=d(),f.insert=l().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),o()(g.A,f),g.A&&g.A.locals&&g.A.locals;class b{constructor(e,n,t,r){this.length=e,this.timesHit=0,this.hasBeenSunk=!1,this.startingCoordinate=n,this.identifier=t,this.type=r}hit(){this.timesHit+=1,this.isSunk()}isSunk(){return this.timesHit===this.length?(this.hasBeenSunk=!0,this.hasBeenSunk):this.hasBeenSunk}}class m{constructor(){this.board=function(){const e=[];for(let n=0;n<10;n++){e[n]=[];for(let t=0;t<10;t++)e[n][t]={coordinates:`${n},${t}`,isOccupied:!1,isHit:!1,occupier:null}}return e}(),this.ships=[],this.cellsHit=[]}#e(e,n,t){let r=!0;for(let o=n;o<n+t;o++)if(void 0===this.board[e][o]||this.board[e][o].isOccupied){r=!1;break}return r}#n(e,n,t){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.ships.length;const o=new b(e,n,r,t),i=+(n=n.split(","))[0],a=+n[1];if(this.#e(i,a,e)){for(let n=a;n<a+e;n++)this.board[i][n].isOccupied=!0,this.board[i][n].occupier=o.identifier;this.ships.push(o)}}#t(e,n,t){let r=!0;for(let o=e;o<e+t;o++)if(void 0===this.board[o]||this.board[o][n].isOccupied){r=!1;break}return r}#r(e,n,t){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.ships.length;const o=new b(e,n,r,t),i=+(n=n.split(","))[0],a=+n[1];if(this.#t(i,a,e)){for(let n=i;n<i+e;n++)this.board[n][a].isOccupied=!0,this.board[n][a].occupier=o.identifier;this.ships.push(o)}}placeShip(e,n,t,r){"horizontal"===t?this.#n(e,n,r):"vertical"===t&&this.#r(e,n,r)}updateCellsHit(){this.cellsHit=[];for(let e=0;e<10;e++)for(let n=0;n<10;n++)!0===this.board[e][n].isHit&&this.cellsHit.push(this.board[e][n].coordinates)}receiveAttack(e){const n=(e=e.split(","))[0],t=e[1];if(!0!==this.board[n][t].isHit&&(this.board[n][t].isHit=!0,this.cellsHit.push(e.join(",")),!0===this.board[n][t].isOccupied)){const e=this.board[n][t].occupier,r=this.ships.findIndex((n=>n.identifier===e));this.ships[r].hit()}}checkAllSunk(){let e=0,n=this.ships.length;return this.ships.forEach((n=>{!0===n.hasBeenSunk&&(e+=1)})),e===n}}class y{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"computer";this.name=e,this.gameboard=new m}placeAllShips(e){e.forEach((e=>{this.gameboard.placeShip(e.length,e.startingCoordinate,e.axis,e.type)}))}}var E=t(247),C={};function x(e){if(!e.length)return;const n=document.querySelector("dialog").querySelector("#shipName");n.style.textDecoration="underline",n.textContent=e[0].type}function B(e){const n=document.querySelector(".computer.board");n.innerHTML="",e.gameboard.board.forEach(((t,r)=>{t.forEach(((t,o)=>{const i=document.createElement("div");i.classList.add("cell"),i.style.height="40px",i.dataset.coordinates=`${r},${o}`,t.isOccupied&&e.gameboard.ships[t.occupier].isSunk()?i.style.backgroundColor="yellow":t.isOccupied&&t.isHit?i.style.backgroundColor="midnightBlue":!t.isOccupied&&t.isHit&&(i.style.backgroundColor="gray"),n.appendChild(i)}))}))}function v(e){const n=document.querySelector(".player.board");n.innerHTML="",e.gameboard.board.forEach(((t,r)=>{t.forEach(((t,o)=>{const i=document.createElement("div");i.classList.add("cell"),i.style.height="40px",i.dataset.coordinates=`${r},${o}`,t.isOccupied&&e.gameboard.ships[t.occupier].isSunk()?i.style.backgroundColor="yellow":t.isOccupied&&t.isHit?(i.style.backgroundColor="midnightBlue",i.style.color="yellow",i.textContent="HIT"):!t.isOccupied&&t.isHit?i.style.backgroundColor="gray":t.isOccupied&&(i.style.backgroundColor="midnightBlue"),n.appendChild(i)}))}))}C.styleTagTransform=h(),C.setAttributes=d(),C.insert=l().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=u(),o()(E.A,C),E.A&&E.A.locals&&E.A.locals;const k=t.p+"ea9232e1a4e0e645ef4df0b3a2210220.mp3",S=t.p+"ba320d5b0b54658e943d16f5476accc2.mp3";function w(e){const n=document.querySelector("body"),t=new Audio(k),r=new Audio(S);"computer"!==e.name?t.play():r.play(),n.innerHTML=`<h1>${e.name[0].toUpperCase()+e.name.slice(1)} won!</h1>`}function H(e,n,t){const r=[e-1,n],o=[e+1,n],i=[e,n-1],a=[e,n+1];let s=[];return r[0]<0||r[0]>9||r[1]<0||r[1]>9||s.push(r.join(",")),o[0]<0||o[0]>9||o[1]<0||o[1]>9||s.push(o.join(",")),i[0]<0||i[0]>9||i[1]<0||i[1]>9||s.push(i.join(",")),a[0]<0||a[0]>9||a[1]<0||a[1]>9||s.push(a.join(",")),s=s.filter((e=>!t.gameboard.cellsHit.includes(e))),s}let $,T=[],L=[];const z=t.p+"daeaeda56b97891d3bc1eeb700d8af2c.mp3",O=t.p+"ded3288812ddc7b789568dfe1694b2fa.mp3",M=t.p+"27e386691db3adf23d5db8529ff21149.mp3";function j(e,n){let t="player";const r=document.querySelector(".board.computer");function o(i){if("player"===t){const a=new Audio(z);r.removeEventListener("click",o),a.play(),setTimeout((()=>{const a=i.target.dataset.coordinates,s=a.split(",");n.gameboard.cellsHit.includes(a)||(n.gameboard.receiveAttack(a),n.gameboard.board[s[0]][s[1]].isOccupied?new Audio(M).play():new Audio(O).play(),B(n),n.gameboard.checkAllSunk()?w(e):(t="computer",setTimeout((()=>{if("computer"===t){new Audio(z).play();const i=function(e){if(T.length>0){if(L.length>=2){console.log(L);let e=L[0],n=L[1];e=e.split(","),n=n.split(",");let t=e[0],r=n[0],o=e[1],i=n[1];if(t===r){console.log("ITS HORIZONTAL",t,r);for(let e=0;e<T.length;e++){let n=T[e];n=n.split(","),n[0]!==t&&(console.log("selective axis horizontal"),T.splice(e,1),e--)}}else if(o===i){console.log("ITS VERTICAL"),console.log(T,"ADJACENTS BEFORE SPLICE");for(let e=0;e<T.length;e++){let n=T[e];n=n.split(","),n[1]!==o&&(console.log("selective axis vertical"),T.splice(e,1),e--)}console.log(T,"ADJACENTS AFTER SPLICE")}}const n=T[T.length-1],t=n.split(","),r=+t[0],o=+t[1];if(e.gameboard.board[r][o].isOccupied){const t=e.gameboard.board[r][o].occupier,i=e.gameboard.ships[t];L.push(`${r},${o}`);let a=H(r,o,e);return T.pop(),T=T.concat(a),i.length-i.timesHit==1&&(T=[],L=[],$=void 0),console.log(T),n}return T.pop(),console.log(T),n}{let n,t,r;for(;!r||e.gameboard.cellsHit.includes(r);)n=Math.round(9*Math.random()),t=Math.round(9*Math.random()),r=`${n},${t}`;if(e.gameboard.board[n][t].isOccupied){L.push(`${n},${t}`);let r=H(n,t,e);T=T.concat(r),console.log(T)}return r}}(e);setTimeout((()=>{const a=i.split(",");e.gameboard.receiveAttack(i),e.gameboard.board[a[0]][a[1]].isOccupied?new Audio(M).play():new Audio(O).play(),v(e),e.gameboard.checkAllSunk()?w(n):(t="player",r.addEventListener("click",o))}),2e3)}}),2400)))}),2e3)}}r.addEventListener("click",o)}!async function(){const e=new y("Player"),n=new y,t=await async function(){const e=new Promise(((e,n)=>{const t=document.querySelector("body");window.addEventListener("load",(n=>{const r=document.createElement("dialog");r.innerHTML='<button>Change to vertical</button><div>\n        <h3>Player</h3>\n        <h3>Please place your <span id="shipName"></span></h3>\n        <div class="placeShip board"></div>\n      </div>',t.prepend(r);let o="horizontal";console.log(o);const i=document.querySelector("dialog button");i.addEventListener("click",(e=>{"horizontal"===o?(i.textContent="Change to horizontal",o="vertical"):"vertical"===o&&(i.textContent="Change to vertical",o="horizontal")}));const a=document.querySelector(".placeShip.board");for(let e=0;e<10;e++)for(let n=0;n<10;n++){const t=document.createElement("div");t.classList.add("cell"),t.dataset.coordinates=`${e},${n}`,a.appendChild(t)}const s=document.querySelectorAll(".placeShip.board .cell"),l=[{type:"Carrier",length:5},{type:"Battleship",length:4},{type:"Cruiser",length:3},{type:"Submarine",length:3},{type:"Destroyer",length:2}];x(l);const c=[];s.forEach((n=>{n.addEventListener("mouseover",(()=>{const e=[],t=n.dataset.coordinates.split(","),r=Number(t[0]),i=Number(t[1]);if("horizontal"===o)for(let n=i;n<i+l[0].length&&!(n>9);n++)e.push(`${r},${n}`);else if("vertical"===o)for(let n=r;n<r+l[0].length&&!(n>9);n++)e.push(`${n},${i}`);e.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.add("greenColor")}))})),n.addEventListener("mouseout",(e=>{const t=[],r=n.dataset.coordinates.split(","),i=Number(r[0]),a=Number(r[1]);if("horizontal"===o)for(let e=a;e<a+l[0].length&&!(e>9);e++)t.push(`${i},${e}`);else if("vertical"===o)for(let e=i;e<i+l[0].length&&!(e>9);e++)t.push(`${e},${a}`);t.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.remove("greenColor")}))})),n.addEventListener("click",(t=>{const i=[],a=n.dataset.coordinates.split(","),s=Number(a[0]),d=Number(a[1]);if("horizontal"===o)for(let e=d;e<d+l[0].length;e++){if(e>9)return;i.push(`${s},${e}`)}else if("vertical"===o)for(let e=s;e<s+l[0].length;e++){if(e>9)return;i.push(`${e},${d}`)}let p=!0;if(i.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.contains("definitelyPlaced")&&(p=!1)})),!p)return;i.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.add("definitelyPlaced")}));const u={length:l[0].length,startingCoordinate:n.dataset.coordinates,axis:o,type:l[0].type};c.push(u),l.shift(),x(l),0===l.length&&(r.close(),r.remove(),e(c))}))})),r.showModal()}))}));return e}();e.placeAllShips(t),function(e){const n=[{type:"Carrier",length:5},{type:"Battleship",length:4},{type:"Cruiser",length:3},{type:"Submarine",length:3},{type:"Destroyer",length:2}];for(let t=0;t<n.length;t++){const r=Math.round(Math.random())?"vertical":"horizontal",o=`${Math.round(9*Math.random())},${Math.round(9*Math.random())}`;e.gameboard.placeShip(n[t].length,o,r,n[t].type),e.gameboard.ships.length!==t+1&&t--}console.log(e.gameboard.ships)}(n),v(e),B(n),console.log(e),console.log(n),j(e,n)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,