(()=>{"use strict";var e={992:(e,n,r)=>{r.d(n,{A:()=>s});var t=r(354),o=r.n(t),i=r(314),a=r.n(i)()(o());a.push([e.id,".game * {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.game h1 {\n  text-align: center;\n  margin: 2rem;\n}\n\n.game .boards h3 {\n  text-align: center;\n  margin: 1rem;\n  user-select: none;\n}\n\n.game .boards {\n  display: flex;\n  justify-content: center;\n  column-gap: 50px;\n}\n\n.game .board {\n  box-sizing: content-box;\n  display: flex;\n  flex-wrap: wrap;\n  width: 400px;\n  height: 400px;\n}\n\n.game .board {\n  flex: 0 1 400px;\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n}\n\n.game .cell {\n  flex: 0 0 40px;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.computer.board .cell:hover {\n  border: 1px solid darkorange;\n  cursor: pointer;\n  user-select: none;\n}\n\n.player1.board .cell:hover {\n  border: 1px solid darkorange;\n  cursor: pointer;\n  user-select: none;\n}\n\n.player2.board .cell:hover {\n  border: 1px solid darkorange;\n  cursor: pointer;\n  user-select: none;\n}\n\n.turns {\n  text-align: center;\n  font-size: 20px;\n  font-weight: bold;\n}\n","",{version:3,sources:["webpack://./src/styles/game.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,eAAe;EACf,2BAA2B;EAC3B,4BAA4B;AAC9B;;AAEA;EACE,cAAc;EACd,6BAA6B;EAC7B,8BAA8B;;EAE9B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,4BAA4B;EAC5B,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,4BAA4B;EAC5B,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,4BAA4B;EAC5B,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB",sourcesContent:[".game * {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.game h1 {\r\n  text-align: center;\r\n  margin: 2rem;\r\n}\r\n\r\n.game .boards h3 {\r\n  text-align: center;\r\n  margin: 1rem;\r\n  user-select: none;\r\n}\r\n\r\n.game .boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  column-gap: 50px;\r\n}\r\n\r\n.game .board {\r\n  box-sizing: content-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.game .board {\r\n  flex: 0 1 400px;\r\n  border-top: 1px solid black;\r\n  border-left: 1px solid black;\r\n}\r\n\r\n.game .cell {\r\n  flex: 0 0 40px;\r\n  border-right: 1px solid black;\r\n  border-bottom: 1px solid black;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.computer.board .cell:hover {\r\n  border: 1px solid darkorange;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.player1.board .cell:hover {\r\n  border: 1px solid darkorange;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.player2.board .cell:hover {\r\n  border: 1px solid darkorange;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.turns {\r\n  text-align: center;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n}\r\n"],sourceRoot:""}]);const s=a},849:(e,n,r)=>{r.d(n,{A:()=>s});var t=r(354),o=r.n(t),i=r(314),a=r.n(i)()(o());a.push([e.id,"* {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.choice {\n  border: 1px solid black;\n  padding: 10px;\n  margin: 30px 0;\n  cursor: pointer;\n}\n\n.choice:hover {\n  background-color: lightgray;\n}\n","",{version:3,sources:["webpack://./src/styles/gameTypeModal.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,2BAA2B;AAC7B",sourcesContent:["* {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.choice {\r\n  border: 1px solid black;\r\n  padding: 10px;\r\n  margin: 30px 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.choice:hover {\r\n  background-color: lightgray;\r\n}\r\n"],sourceRoot:""}]);const s=a},592:(e,n,r)=>{r.d(n,{A:()=>s});var t=r(354),o=r.n(t),i=r(314),a=r.n(i)()(o());a.push([e.id,"* {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nh1 {\n  text-align: center;\n  margin: 2rem;\n}\n\n.boards h3 {\n  text-align: center;\n  margin: 1rem;\n  user-select: none;\n}\n\n.boards {\n  display: flex;\n  justify-content: center;\n  column-gap: 50px;\n}\n\n.board {\n  box-sizing: content-box;\n  display: flex;\n  flex-wrap: wrap;\n  width: 400px;\n  height: 400px;\n}\n\n.player.board,\n.computer.board,\n.placeShip.board {\n  flex: 0 1 400px;\n  /* border: 1px solid black; */\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n\n  user-select: none;\n}\n\ndialog {\n  text-align: center;\n  background-color: ghostwhite;\n  margin: auto;\n  border: none;\n  outline: none;\n  padding: 50px;\n}\n\n.cell {\n  flex: 0 0 40px;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.greenColor {\n  background-color: green;\n}\n\n.definitelyPlaced {\n  background-color: darkgreen;\n}\n","",{version:3,sources:["webpack://./src/styles/placeShipModal.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;;;EAGE,eAAe;EACf,6BAA6B;EAC7B,2BAA2B;EAC3B,4BAA4B;;EAE5B,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,4BAA4B;EAC5B,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,aAAa;AACf;;AAEA;EACE,cAAc;EACd,6BAA6B;EAC7B,8BAA8B;;EAE9B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,2BAA2B;AAC7B",sourcesContent:["* {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  margin: 2rem;\r\n}\r\n\r\n.boards h3 {\r\n  text-align: center;\r\n  margin: 1rem;\r\n  user-select: none;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  column-gap: 50px;\r\n}\r\n\r\n.board {\r\n  box-sizing: content-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.player.board,\r\n.computer.board,\r\n.placeShip.board {\r\n  flex: 0 1 400px;\r\n  /* border: 1px solid black; */\r\n  border-top: 1px solid black;\r\n  border-left: 1px solid black;\r\n\r\n  user-select: none;\r\n}\r\n\r\ndialog {\r\n  text-align: center;\r\n  background-color: ghostwhite;\r\n  margin: auto;\r\n  border: none;\r\n  outline: none;\r\n  padding: 50px;\r\n}\r\n\r\n.cell {\r\n  flex: 0 0 40px;\r\n  border-right: 1px solid black;\r\n  border-bottom: 1px solid black;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.greenColor {\r\n  background-color: green;\r\n}\r\n\r\n.definitelyPlaced {\r\n  background-color: darkgreen;\r\n}\r\n"],sourceRoot:""}]);const s=a},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);t&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},354:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=t.base?c[0]+t.base:c[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var p=r(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(A);else{var h=o(A,t);t.byIndex=s,n.splice(s,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var i=t(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=r(i[a]);n[s].references--}for(var c=t(e,o),l=0;l<i.length;l++){var d=r(i[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=c}}},659:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var i=n[t]={id:t,exports:{}};return e[t](i,i.exports,r),i.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var n=r.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=t[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.nc=void 0;var t=r(72),o=r.n(t),i=r(825),a=r.n(i),s=r(659),c=r.n(s),l=r(56),d=r.n(l),u=r(540),p=r.n(u),A=r(113),h=r.n(A),m=r(992),b={};b.styleTagTransform=h(),b.setAttributes=d(),b.insert=c().bind(null,"head"),b.domAPI=a(),b.insertStyleElement=p(),o()(m.A,b),m.A&&m.A.locals&&m.A.locals;class f{constructor(e,n,r,t){this.length=e,this.timesHit=0,this.hasBeenSunk=!1,this.startingCoordinate=n,this.identifier=r,this.type=t}hit(){this.timesHit+=1,this.isSunk()}isSunk(){return this.timesHit===this.length?(this.hasBeenSunk=!0,this.hasBeenSunk):this.hasBeenSunk}}class g{constructor(){this.board=function(){const e=[];for(let n=0;n<10;n+=1){e[n]=[];for(let r=0;r<10;r+=1)e[n][r]={coordinates:`${n},${r}`,isOccupied:!1,isHit:!1,occupier:null}}return e}(),this.ships=[],this.cellsHit=[]}canBePlacedHorizontally(e,n,r){let t=!0;for(let o=n;o<n+r;o+=1)if(void 0===this.board[e][o]||this.board[e][o].isOccupied){t=!1;break}return t}placeShipHorizontally(e,n,r){let t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.ships.length;const o=new f(e,n,t,r),i=n.split(","),a=+i[0],s=+i[1];if(this.canBePlacedHorizontally(a,s,e)){for(let n=s;n<s+e;n+=1)this.board[a][n].isOccupied=!0,this.board[a][n].occupier=o.identifier;this.ships.push(o)}}canBePlacedVertically(e,n,r){let t=!0;for(let o=e;o<e+r;o+=1)if(void 0===this.board[o]||this.board[o][n].isOccupied){t=!1;break}return t}placeShipVertically(e,n,r){let t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.ships.length;const o=new f(e,n,t,r),i=n.split(","),a=+i[0],s=+i[1];if(this.canBePlacedVertically(a,s,e)){for(let n=a;n<a+e;n+=1)this.board[n][s].isOccupied=!0,this.board[n][s].occupier=o.identifier;this.ships.push(o)}}placeShip(e,n,r,t){"horizontal"===r?this.placeShipHorizontally(e,n,t):"vertical"===r&&this.placeShipVertically(e,n,t)}updateCellsHit(){this.cellsHit=[];for(let e=0;e<10;e+=1)for(let n=0;n<10;n+=1)!0===this.board[e][n].isHit&&this.cellsHit.push(this.board[e][n].coordinates)}receiveAttack(e){const n=e.split(","),r=n[0],t=n[1];if(!0!==this.board[r][t].isHit&&(this.board[r][t].isHit=!0,this.cellsHit.push(n.join(",")),!0===this.board[r][t].isOccupied)){const{occupier:e}=this.board[r][t],n=this.ships.findIndex((n=>n.identifier===e));this.ships[n].hit()}}checkAllSunk(){let e=0;const n=this.ships.length;return this.ships.forEach((n=>{!0===n.hasBeenSunk&&(e+=1)})),e===n}}class y{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"computer";this.name=e,this.gameboard=new g}placeAllShips(e){e.forEach((e=>{this.gameboard.placeShip(e.length,e.startingCoordinate,e.axis,e.type)}))}}var E=r(592),v={};function C(e){if(!e.length)return;const n=document.querySelector("dialog").querySelector("#shipName");n.style.textDecoration="underline",n.textContent=e[0].type}async function B(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Player";return new Promise((n=>{const r=document.querySelector("body"),t=document.createElement("dialog");t.innerHTML=`<button>Change to vertical</button><div>\n        <h3>${e}</h3>\n        <h3>Please place your <span id="shipName"></span></h3>\n        <div class="placeShip board"></div>\n      </div>`,r.prepend(t);let o="horizontal";const i=document.querySelector("dialog button");i.addEventListener("click",(()=>{"horizontal"===o?(i.textContent="Change to horizontal",o="vertical"):"vertical"===o&&(i.textContent="Change to vertical",o="horizontal")}));const a=document.querySelector(".placeShip.board");for(let e=0;e<10;e+=1)for(let n=0;n<10;n+=1){const r=document.createElement("div");r.classList.add("cell"),r.dataset.coordinates=`${e},${n}`,a.appendChild(r)}const s=document.querySelectorAll(".placeShip.board .cell"),c=[{type:"Carrier",length:5},{type:"Battleship",length:4},{type:"Cruiser",length:3},{type:"Submarine",length:3},{type:"Destroyer",length:2}];C(c);const l=[];s.forEach((e=>{e.addEventListener("mouseover",(()=>{const n=[],r=e.dataset.coordinates.split(","),t=Number(r[0]),i=Number(r[1]);if("horizontal"===o)for(let e=i;e<i+c[0].length&&!(e>9);e+=1)n.push(`${t},${e}`);else if("vertical"===o)for(let e=t;e<t+c[0].length&&!(e>9);e+=1)n.push(`${e},${i}`);n.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.add("greenColor")}))})),e.addEventListener("mouseout",(()=>{const n=[],r=e.dataset.coordinates.split(","),t=Number(r[0]),i=Number(r[1]);if("horizontal"===o)for(let e=i;e<i+c[0].length&&!(e>9);e+=1)n.push(`${t},${e}`);else if("vertical"===o)for(let e=t;e<t+c[0].length&&!(e>9);e+=1)n.push(`${e},${i}`);n.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.remove("greenColor")}))})),e.addEventListener("click",(()=>{const r=[],i=e.dataset.coordinates.split(","),a=Number(i[0]),s=Number(i[1]);if("horizontal"===o)for(let e=s;e<s+c[0].length;e+=1){if(e>9)return;r.push(`${a},${e}`)}else if("vertical"===o)for(let e=a;e<a+c[0].length;e+=1){if(e>9)return;r.push(`${e},${s}`)}let d=!0;if(r.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.contains("definitelyPlaced")&&(d=!1)})),!d)return;r.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.add("definitelyPlaced")}));const u={length:c[0].length,startingCoordinate:e.dataset.coordinates,axis:o,type:c[0].type};l.push(u),c.shift(),C(c),0===c.length&&(t.close(),t.remove(),n(l))}))})),t.showModal()}))}function x(e){const n=document.querySelector(".computer.board");n.innerHTML="",e.gameboard.board.forEach(((r,t)=>{r.forEach(((r,o)=>{const i=document.createElement("div");i.classList.add("cell"),i.style.height="40px",i.dataset.coordinates=`${t},${o}`,r.isOccupied&&e.gameboard.ships[r.occupier].isSunk()?i.style.backgroundColor="yellow":r.isOccupied&&r.isHit?i.style.backgroundColor="midnightBlue":!r.isOccupied&&r.isHit&&(i.style.backgroundColor="gray"),n.appendChild(i)}))}))}function k(e){const n=document.querySelector(".player.board");n.innerHTML="",e.gameboard.board.forEach(((r,t)=>{r.forEach(((r,o)=>{const i=document.createElement("div");i.classList.add("cell"),i.style.height="40px",i.dataset.coordinates=`${t},${o}`,r.isOccupied&&e.gameboard.ships[r.occupier].isSunk()?i.style.backgroundColor="yellow":r.isOccupied&&r.isHit?(i.style.backgroundColor="midnightBlue",i.style.color="yellow",i.textContent="HIT"):!r.isOccupied&&r.isHit?i.style.backgroundColor="gray":r.isOccupied&&(i.style.backgroundColor="midnightBlue"),n.appendChild(i)}))}))}function S(e,n,r){const t=[e-1,n],o=[e+1,n],i=[e,n-1],a=[e,n+1];let s=[];return t[0]<0||t[0]>9||t[1]<0||t[1]>9||s.push(t.join(",")),o[0]<0||o[0]>9||o[1]<0||o[1]>9||s.push(o.join(",")),i[0]<0||i[0]>9||i[1]<0||i[1]>9||s.push(i.join(",")),a[0]<0||a[0]>9||a[1]<0||a[1]>9||s.push(a.join(",")),s=s.filter((e=>!r.gameboard.cellsHit.includes(e))),s}v.styleTagTransform=h(),v.setAttributes=d(),v.insert=c().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=p(),o()(E.A,v),E.A&&E.A.locals&&E.A.locals;let w=[],H=[];const $=r.p+"ea9232e1a4e0e645ef4df0b3a2210220.mp3",L=r.p+"ba320d5b0b54658e943d16f5476accc2.mp3";function M(e){const n=document.querySelector("body"),r=new Audio($),t=new Audio(L);"computer"!==e.name?r.play():t.play(),n.innerHTML=`<h1>${e.name[0].toUpperCase()+e.name.slice(1)} won!</h1>`}function T(e,n){let r="player";const t=document.querySelector(".board.computer");function o(i){if("player"===r){const{coordinates:a}=i.target.dataset;if(n.gameboard.cellsHit.includes(a))return;if(n.gameboard.receiveAttack(a),x(n),n.gameboard.checkAllSunk())return void M(e);r="computer",t.removeEventListener("click",o),function(){if("computer"===r){const i=function(e){if(w.length>0){if(H.length>=2){let e=H[0],n=H[1];e=e.split(","),n=n.split(",");const r=e[0],t=n[0],o=e[1],i=n[1];if(r===t)for(let e=0;e<w.length;e+=1){let n=w[e];n=n.split(","),n[0]!==r&&(w.splice(e,1),e-=1)}else if(o===i)for(let e=0;e<w.length;e+=1){let n=w[e];n=n.split(","),n[1]!==o&&(w.splice(e,1),e-=1)}}const n=w[w.length-1],r=n.split(","),t=+r[0],o=+r[1];if(e.gameboard.board[t][o].isOccupied){const r=e.gameboard.board[t][o].occupier,i=e.gameboard.ships[r];H.push(`${t},${o}`);const a=S(t,o,e);return w.pop(),w=w.concat(a),i.length-i.timesHit==1&&(w=[],H=[]),n}return w.pop(),n}let n,r,t;for(;!t||e.gameboard.cellsHit.includes(t);)n=Math.round(9*Math.random()),r=Math.round(9*Math.random()),t=`${n},${r}`;if(e.gameboard.board[n][r].isOccupied){H.push(`${n},${r}`);const t=S(n,r,e);w=w.concat(t)}return t}(e);if(e.gameboard.receiveAttack(i),k(e),e.gameboard.checkAllSunk())return void M(n);r="player",t.addEventListener("click",o)}}()}}t.addEventListener("click",o)}function q(e,n){const r=document.querySelector(".player1.board"),t=document.querySelector(".player2.board");r.innerHTML="",t.innerHTML="",e.gameboard.board.forEach(((n,t)=>{n.forEach(((n,o)=>{const i=document.createElement("div");i.classList.add("cell"),i.style.height="40px",i.dataset.coordinates=`${t},${o}`,n.isOccupied&&e.gameboard.ships[n.occupier].isSunk()?i.style.backgroundColor="yellow":n.isOccupied&&n.isHit?(i.style.backgroundColor="midnightBlue",i.style.color="yellow",i.textContent="HIT"):!n.isOccupied&&n.isHit&&(i.style.backgroundColor="gray"),r.appendChild(i)}))})),n.gameboard.board.forEach(((e,r)=>{e.forEach(((e,o)=>{const i=document.createElement("div");i.classList.add("cell"),i.style.height="40px",i.dataset.coordinates=`${r},${o}`,e.isOccupied&&n.gameboard.ships[e.occupier].isSunk()?i.style.backgroundColor="yellow":e.isOccupied&&e.isHit?(i.style.backgroundColor="midnightBlue",i.style.color="yellow",i.textContent="HIT"):!e.isOccupied&&e.isHit&&(i.style.backgroundColor="gray"),t.appendChild(i)}))}))}function z(e){document.querySelector(".turns").textContent=`${e}'s turn`}r.p,r.p,r.p;var O=r(849),P={};P.styleTagTransform=h(),P.setAttributes=d(),P.insert=c().bind(null,"head"),P.domAPI=a(),P.insertStyleElement=p(),o()(O.A,P),O.A&&O.A.locals&&O.A.locals,async function(){const e=await new Promise((e=>{const n=document.querySelector("body"),r=document.createElement("dialog");r.innerHTML='\n    <div class="choices">\n      <div class="choice friend">Play with friend</div>\n      <div class="choice computer">Play with computer</div>\n    </div>\n  ',n.prepend(r),document.querySelector(".choices").addEventListener("click",(n=>{n.target.classList.contains("computer")?(r.close(),r.remove(),e("computer")):n.target.classList.contains("friend")&&(r.close(),r.remove(),e("friend"))})),r.showModal()}));if("computer"===e)!async function(e){!function(e){document.querySelector("body").innerHTML+=`<div class="boards">\n        <div class="player">\n          <h3>${e}</h3>\n          <div class="player board"></div>\n        </div>\n        <div class="computer">\n          <h3>Computer</h3>\n          <div class="computer board"></div>\n        </div>\n      </div>`}(e);const n=new y(e),r=new y,t=await B(e);n.placeAllShips(t),function(e){const n=[{type:"Carrier",length:5},{type:"Battleship",length:4},{type:"Cruiser",length:3},{type:"Submarine",length:3},{type:"Destroyer",length:2}];for(let r=0;r<n.length;r+=1){const t=Math.round(Math.random())?"vertical":"horizontal",o=`${Math.round(9*Math.random())},${Math.round(9*Math.random())}`;e.gameboard.placeShip(n[r].length,o,t,n[r].type),e.gameboard.ships.length!==r+1&&(r-=1)}}(r),k(n),x(r),T(n,r)}(await new Promise((e=>{const n=document.querySelector("body"),r=document.createElement("dialog");r.innerHTML='<form>\n      <label for="name">Name: </label>\n      <input type="text" id="name" required />\n      <button>Submit</button>\n    </form>',r.querySelector("form").addEventListener("submit",(n=>{n.preventDefault(),e(n.target.name.value),r.close(),r.remove()})),n.prepend(r),r.showModal()})));else if("friend"===e){const e=await new Promise((e=>{const n=document.querySelector("body"),r=document.createElement("dialog");r.innerHTML='<form>\n        <label for="name1">Player 1 Name: </label>\n        <input type="text" id="name1" name="name1" required />\n        <br>\n        <label for="name2">Player 2 Name: </label>\n        <input type="text" id="name2" name="name2" required />\n        <button>Submit</button>\n      </form>',r.querySelector("form").addEventListener("submit",(n=>{n.preventDefault();const t={player1:n.target.name1.value,player2:n.target.name2.value};e(t),r.close(),r.remove()})),n.prepend(r),r.showModal()}));!async function(e,n){!function(e,n){const r=document.querySelector(".turns"),t=document.createElement("div"),o=`<div class="player1Display">\n            <h3>${e}</h3>\n            <div class="player1 board"></div>\n          </div>\n          <div class="player2Display">\n            <h3>${n}</h3>\n            <div class="player2 board"></div>\n          </div>`;t.classList.add("boards"),t.innerHTML=o,r.insertAdjacentElement("afterend",t)}(e,n);const r=new y(e),t=new y(n),o=await B(e),i=await B(n);r.placeAllShips(o),t.placeAllShips(i),q(r,t),function(e,n){let r=e.name;z(e.name);const t=document.querySelector(".board.player1"),o=document.querySelector(".board.player2");function i(s){if(r===n.name){const{coordinates:c}=s.target.dataset;if(e.gameboard.cellsHit.includes(c))return;if(e.gameboard.receiveAttack(c),e.gameboard.checkAllSunk())return void M(n);r=e.name,z(e.name),t.removeEventListener("click",i),o.addEventListener("click",a),q(e,n)}}function a(s){if(r===e.name){const{coordinates:c}=s.target.dataset;if(n.gameboard.cellsHit.includes(c))return;if(n.gameboard.receiveAttack(c),n.gameboard.checkAllSunk())return void M(e);r=n.name,z(n.name),o.removeEventListener("click",a),t.addEventListener("click",i),q(e,n)}}o.addEventListener("click",a)}(r,t)}(e.player1,e.player2)}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,