(()=>{"use strict";var e={636:(e,n,r)=>{r.d(n,{A:()=>l});var t=r(354),o=r.n(t),a=r(314),i=r.n(a)()(o());i.push([e.id,".doublePlayerName form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.doublePlayerName label {\n  font-size: 20px;\n}\n\n.doublePlayerName input {\n  padding: 5px;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.doublePlayerName button {\n  align-self: center;\n  font-size: 16px;\n  padding: 10px 15px;\n  background-color: midnightblue;\n  color: orange;\n  cursor: pointer;\n  border: 1px solid midnightblue;\n}\n\n.doublePlayerName button:focus {\n  outline: 2px solid orange;\n}\n\n.doublePlayerName button:hover {\n  background-color: rgb(47, 47, 168);\n}\n","",{version:3,sources:["webpack://./src/styles/doublePlayerNames.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,8BAA8B;EAC9B,aAAa;EACb,eAAe;EACf,8BAA8B;AAChC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kCAAkC;AACpC",sourcesContent:[".doublePlayerName form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n.doublePlayerName label {\r\n  font-size: 20px;\r\n}\r\n\r\n.doublePlayerName input {\r\n  padding: 5px;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n}\r\n\r\n.doublePlayerName button {\r\n  align-self: center;\r\n  font-size: 16px;\r\n  padding: 10px 15px;\r\n  background-color: midnightblue;\r\n  color: orange;\r\n  cursor: pointer;\r\n  border: 1px solid midnightblue;\r\n}\r\n\r\n.doublePlayerName button:focus {\r\n  outline: 2px solid orange;\r\n}\r\n\r\n.doublePlayerName button:hover {\r\n  background-color: rgb(47, 47, 168);\r\n}\r\n"],sourceRoot:""}]);const l=i},992:(e,n,r)=>{r.d(n,{A:()=>l});var t=r(354),o=r.n(t),a=r(314),i=r.n(a)()(o());i.push([e.id,".game * {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.game h1 {\n  text-align: center;\n  margin: 2rem;\n}\n\n.game .boards h3 {\n  text-align: center;\n  margin: 1rem;\n  user-select: none;\n}\n\n.game .boards {\n  display: flex;\n  justify-content: center;\n  column-gap: 50px;\n}\n\n.game .board {\n  box-sizing: content-box;\n  display: flex;\n  flex-wrap: wrap;\n  width: 400px;\n  height: 400px;\n}\n\n.game .board {\n  flex: 0 1 400px;\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n}\n\n.game .cell {\n  flex: 0 0 40px;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.computer.board .cell:hover {\n  border: 1px solid darkorange;\n  cursor: pointer;\n  user-select: none;\n}\n\n.player1.board .cell:hover {\n  border: 1px solid darkorange;\n  cursor: pointer;\n  user-select: none;\n}\n\n.player2.board .cell:hover {\n  border: 1px solid darkorange;\n  cursor: pointer;\n  user-select: none;\n}\n\n.turns {\n  text-align: center;\n  font-size: 20px;\n  font-weight: bold;\n}\n","",{version:3,sources:["webpack://./src/styles/game.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,eAAe;EACf,2BAA2B;EAC3B,4BAA4B;AAC9B;;AAEA;EACE,cAAc;EACd,6BAA6B;EAC7B,8BAA8B;;EAE9B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,4BAA4B;EAC5B,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,4BAA4B;EAC5B,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,4BAA4B;EAC5B,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB",sourcesContent:[".game * {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.game h1 {\r\n  text-align: center;\r\n  margin: 2rem;\r\n}\r\n\r\n.game .boards h3 {\r\n  text-align: center;\r\n  margin: 1rem;\r\n  user-select: none;\r\n}\r\n\r\n.game .boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  column-gap: 50px;\r\n}\r\n\r\n.game .board {\r\n  box-sizing: content-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.game .board {\r\n  flex: 0 1 400px;\r\n  border-top: 1px solid black;\r\n  border-left: 1px solid black;\r\n}\r\n\r\n.game .cell {\r\n  flex: 0 0 40px;\r\n  border-right: 1px solid black;\r\n  border-bottom: 1px solid black;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.computer.board .cell:hover {\r\n  border: 1px solid darkorange;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.player1.board .cell:hover {\r\n  border: 1px solid darkorange;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.player2.board .cell:hover {\r\n  border: 1px solid darkorange;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.turns {\r\n  text-align: center;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n}\r\n"],sourceRoot:""}]);const l=i},849:(e,n,r)=>{r.d(n,{A:()=>l});var t=r(354),o=r.n(t),a=r(314),i=r.n(a)()(o());i.push([e.id,"* {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.chooseGameType .choice {\n  border: 1px solid black;\n  padding: 10px;\n  margin: 30px 0;\n  cursor: pointer;\n}\n\n.chooseGameType .choice:hover {\n  background-color: lightgray;\n}\n","",{version:3,sources:["webpack://./src/styles/gameTypeModal.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,2BAA2B;AAC7B",sourcesContent:["* {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.chooseGameType .choice {\r\n  border: 1px solid black;\r\n  padding: 10px;\r\n  margin: 30px 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.chooseGameType .choice:hover {\r\n  background-color: lightgray;\r\n}\r\n"],sourceRoot:""}]);const l=i},592:(e,n,r)=>{r.d(n,{A:()=>l});var t=r(354),o=r.n(t),a=r(314),i=r.n(a)()(o());i.push([e.id,"* {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.place-player-ships {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.place-player-ships button {\n  align-self: center;\n}\n\nh1 {\n  text-align: center;\n  margin: 2rem;\n}\n\n.boards h3 {\n  text-align: center;\n  margin: 1rem;\n  user-select: none;\n}\n\n.boards {\n  display: flex;\n  justify-content: center;\n  column-gap: 50px;\n}\n\n.board {\n  box-sizing: content-box;\n  display: flex;\n  flex-wrap: wrap;\n  width: 400px;\n  height: 400px;\n}\n\n.player.board,\n.computer.board,\n.placeShip.board {\n  flex: 0 1 400px;\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n\n  user-select: none;\n}\n\ndialog {\n  text-align: center;\n  background-color: ghostwhite;\n  margin: auto;\n  border: none;\n  outline: none;\n  padding: 50px;\n}\n\n.cell {\n  flex: 0 0 40px;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.greenColor {\n  background-color: green;\n}\n\n.definitelyPlaced {\n  background-color: darkgreen;\n}\n","",{version:3,sources:["webpack://./src/styles/placeShipModal.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;;;EAGE,eAAe;EACf,2BAA2B;EAC3B,4BAA4B;;EAE5B,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,4BAA4B;EAC5B,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,aAAa;AACf;;AAEA;EACE,cAAc;EACd,6BAA6B;EAC7B,8BAA8B;;EAE9B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,2BAA2B;AAC7B",sourcesContent:["* {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.place-player-ships {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n.place-player-ships button {\r\n  align-self: center;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  margin: 2rem;\r\n}\r\n\r\n.boards h3 {\r\n  text-align: center;\r\n  margin: 1rem;\r\n  user-select: none;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  column-gap: 50px;\r\n}\r\n\r\n.board {\r\n  box-sizing: content-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.player.board,\r\n.computer.board,\r\n.placeShip.board {\r\n  flex: 0 1 400px;\r\n  border-top: 1px solid black;\r\n  border-left: 1px solid black;\r\n\r\n  user-select: none;\r\n}\r\n\r\ndialog {\r\n  text-align: center;\r\n  background-color: ghostwhite;\r\n  margin: auto;\r\n  border: none;\r\n  outline: none;\r\n  padding: 50px;\r\n}\r\n\r\n.cell {\r\n  flex: 0 0 40px;\r\n  border-right: 1px solid black;\r\n  border-bottom: 1px solid black;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.greenColor {\r\n  background-color: green;\r\n}\r\n\r\n.definitelyPlaced {\r\n  background-color: darkgreen;\r\n}\r\n"],sourceRoot:""}]);const l=i},216:(e,n,r)=>{r.d(n,{A:()=>l});var t=r(354),o=r.n(t),a=r(314),i=r.n(a)()(o());i.push([e.id,".singlePlayerName form {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.singlePlayerName .input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.singlePlayerName label {\n  font-style: italic;\n  font-size: 18px;\n}\n\n.singlePlayerName input {\n  padding: 5px;\n  font-size: 20px;\n  font-weight: bold;\n  text-align: center;\n  width: 200px;\n}\n\n.singlePlayerName button {\n  align-self: center;\n  font-size: 16px;\n  padding: 10px 15px;\n  background-color: midnightblue;\n  color: orange;\n  cursor: pointer;\n  border: 1px solid midnightblue;\n}\n\n.singlePlayerName button:focus {\n  outline: 2px solid orange;\n}\n\n.singlePlayerName button:hover {\n  background-color: rgb(47, 47, 168);\n}\n","",{version:3,sources:["webpack://./src/styles/singlePlayerName.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;AACV;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,iBAAiB;EACjB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,8BAA8B;EAC9B,aAAa;EACb,eAAe;EACf,8BAA8B;AAChC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kCAAkC;AACpC",sourcesContent:[".singlePlayerName form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\n\r\n.singlePlayerName .input-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.singlePlayerName label {\r\n  font-style: italic;\r\n  font-size: 18px;\r\n}\r\n\r\n.singlePlayerName input {\r\n  padding: 5px;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  width: 200px;\r\n}\r\n\r\n.singlePlayerName button {\r\n  align-self: center;\r\n  font-size: 16px;\r\n  padding: 10px 15px;\r\n  background-color: midnightblue;\r\n  color: orange;\r\n  cursor: pointer;\r\n  border: 1px solid midnightblue;\r\n}\r\n\r\n.singlePlayerName button:focus {\r\n  outline: 2px solid orange;\r\n}\r\n\r\n.singlePlayerName button:hover {\r\n  background-color: rgb(47, 47, 168);\r\n}\r\n"],sourceRoot:""}]);const l=i},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);t&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},354:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var a={},i=[],l=0;l<e.length;l++){var s=e[l],c=t.base?s[0]+t.base:s[0],d=a[c]||0,A="".concat(c," ").concat(d);a[c]=d+1;var p=r(A),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var m=o(u,t);t.byIndex=l,n.splice(l,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=r(a[i]);n[l].references--}for(var s=t(e,o),c=0;c<a.length;c++){var d=r(a[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=s}}},659:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return e[t](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var n=r.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=t[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.nc=void 0;var t=r(72),o=r.n(t),a=r(825),i=r.n(a),l=r(659),s=r.n(l),c=r(56),d=r.n(c),A=r(540),p=r.n(A),u=r(113),m=r.n(u),h=r(992),b={};b.styleTagTransform=m(),b.setAttributes=d(),b.insert=s().bind(null,"head"),b.domAPI=i(),b.insertStyleElement=p(),o()(h.A,b),h.A&&h.A.locals&&h.A.locals;class g{constructor(e,n,r,t){this.length=e,this.timesHit=0,this.hasBeenSunk=!1,this.startingCoordinate=n,this.identifier=r,this.type=t}hit(){this.timesHit+=1,this.isSunk()}isSunk(){return this.timesHit===this.length?(this.hasBeenSunk=!0,this.hasBeenSunk):this.hasBeenSunk}}class f{constructor(){this.board=function(){const e=[];for(let n=0;n<10;n+=1){e[n]=[];for(let r=0;r<10;r+=1)e[n][r]={coordinates:`${n},${r}`,isOccupied:!1,isHit:!1,occupier:null}}return e}(),this.ships=[],this.cellsHit=[]}canBePlacedHorizontally(e,n,r){let t=!0;for(let o=n;o<n+r;o+=1)if(void 0===this.board[e][o]||this.board[e][o].isOccupied){t=!1;break}return t}placeShipHorizontally(e,n,r){let t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.ships.length;const o=new g(e,n,t,r),a=n.split(","),i=+a[0],l=+a[1];if(this.canBePlacedHorizontally(i,l,e)){for(let n=l;n<l+e;n+=1)this.board[i][n].isOccupied=!0,this.board[i][n].occupier=o.identifier;this.ships.push(o)}}canBePlacedVertically(e,n,r){let t=!0;for(let o=e;o<e+r;o+=1)if(void 0===this.board[o]||this.board[o][n].isOccupied){t=!1;break}return t}placeShipVertically(e,n,r){let t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.ships.length;const o=new g(e,n,t,r),a=n.split(","),i=+a[0],l=+a[1];if(this.canBePlacedVertically(i,l,e)){for(let n=i;n<i+e;n+=1)this.board[n][l].isOccupied=!0,this.board[n][l].occupier=o.identifier;this.ships.push(o)}}placeShip(e,n,r,t){"horizontal"===r?this.placeShipHorizontally(e,n,t):"vertical"===r&&this.placeShipVertically(e,n,t)}updateCellsHit(){this.cellsHit=[];for(let e=0;e<10;e+=1)for(let n=0;n<10;n+=1)!0===this.board[e][n].isHit&&this.cellsHit.push(this.board[e][n].coordinates)}receiveAttack(e){const n=e.split(","),r=n[0],t=n[1];if(!0!==this.board[r][t].isHit&&(this.board[r][t].isHit=!0,this.cellsHit.push(n.join(",")),!0===this.board[r][t].isOccupied)){const{occupier:e}=this.board[r][t],n=this.ships.findIndex((n=>n.identifier===e));this.ships[n].hit()}}checkAllSunk(){let e=0;const n=this.ships.length;return this.ships.forEach((n=>{!0===n.hasBeenSunk&&(e+=1)})),e===n}}class y{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"computer";this.name=e,this.gameboard=new f}placeAllShips(e){e.forEach((e=>{this.gameboard.placeShip(e.length,e.startingCoordinate,e.axis,e.type)}))}}var E=r(592),C={};function x(e){if(!e.length)return;const n=document.querySelector("dialog").querySelector("#shipName");n.style.textDecoration="underline",n.textContent=e[0].type}async function B(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Player";return new Promise((n=>{const r=document.querySelector("body"),t=document.createElement("dialog");t.innerHTML=`<div class="place-player-ships">\n        <h3>${e}</h3>\n        <h3>Please place your <span id="shipName"></span></h3>\n        <button>Change to vertical</button>\n        <div class="placeShip board"></div>\n      </div>`,r.prepend(t);let o="horizontal";const a=document.querySelector("dialog button");a.addEventListener("click",(()=>{"horizontal"===o?(a.textContent="Change to horizontal",o="vertical"):"vertical"===o&&(a.textContent="Change to vertical",o="horizontal")}));const i=document.querySelector(".placeShip.board");for(let e=0;e<10;e+=1)for(let n=0;n<10;n+=1){const r=document.createElement("div");r.classList.add("cell"),r.dataset.coordinates=`${e},${n}`,i.appendChild(r)}const l=document.querySelectorAll(".placeShip.board .cell"),s=[{type:"Carrier",length:5},{type:"Battleship",length:4},{type:"Cruiser",length:3},{type:"Submarine",length:3},{type:"Destroyer",length:2}];x(s);const c=[];l.forEach((e=>{e.addEventListener("mouseover",(()=>{const n=[],r=e.dataset.coordinates.split(","),t=Number(r[0]),a=Number(r[1]);if("horizontal"===o)for(let e=a;e<a+s[0].length&&!(e>9);e+=1)n.push(`${t},${e}`);else if("vertical"===o)for(let e=t;e<t+s[0].length&&!(e>9);e+=1)n.push(`${e},${a}`);n.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.add("greenColor")}))})),e.addEventListener("mouseout",(()=>{const n=[],r=e.dataset.coordinates.split(","),t=Number(r[0]),a=Number(r[1]);if("horizontal"===o)for(let e=a;e<a+s[0].length&&!(e>9);e+=1)n.push(`${t},${e}`);else if("vertical"===o)for(let e=t;e<t+s[0].length&&!(e>9);e+=1)n.push(`${e},${a}`);n.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.remove("greenColor")}))})),e.addEventListener("click",(()=>{const r=[],a=e.dataset.coordinates.split(","),i=Number(a[0]),l=Number(a[1]);if("horizontal"===o)for(let e=l;e<l+s[0].length;e+=1){if(e>9)return;r.push(`${i},${e}`)}else if("vertical"===o)for(let e=i;e<i+s[0].length;e+=1){if(e>9)return;r.push(`${e},${l}`)}let d=!0;if(r.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.contains("definitelyPlaced")&&(d=!1)})),!d)return;r.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.add("definitelyPlaced")}));const A={length:s[0].length,startingCoordinate:e.dataset.coordinates,axis:o,type:s[0].type};c.push(A),s.shift(),x(s),0===s.length&&(t.close(),t.remove(),n(c))}))})),t.showModal()}))}function v(e){const n=document.querySelector(".computer.board");n.innerHTML="",e.gameboard.board.forEach(((r,t)=>{r.forEach(((r,o)=>{const a=document.createElement("div");a.classList.add("cell"),a.style.height="40px",a.dataset.coordinates=`${t},${o}`,r.isOccupied&&e.gameboard.ships[r.occupier].isSunk()?a.style.backgroundColor="yellow":r.isOccupied&&r.isHit?a.style.backgroundColor="midnightBlue":!r.isOccupied&&r.isHit&&(a.style.backgroundColor="gray"),n.appendChild(a)}))}))}function k(e){const n=document.querySelector(".player.board");n.innerHTML="",e.gameboard.board.forEach(((r,t)=>{r.forEach(((r,o)=>{const a=document.createElement("div");a.classList.add("cell"),a.style.height="40px",a.dataset.coordinates=`${t},${o}`,r.isOccupied&&e.gameboard.ships[r.occupier].isSunk()?a.style.backgroundColor="yellow":r.isOccupied&&r.isHit?(a.style.backgroundColor="midnightBlue",a.style.color="yellow",a.textContent="HIT"):!r.isOccupied&&r.isHit?a.style.backgroundColor="gray":r.isOccupied&&(a.style.backgroundColor="midnightBlue"),n.appendChild(a)}))}))}C.styleTagTransform=m(),C.setAttributes=d(),C.insert=s().bind(null,"head"),C.domAPI=i(),C.insertStyleElement=p(),o()(E.A,C),E.A&&E.A.locals&&E.A.locals;const S=r.p+"ea9232e1a4e0e645ef4df0b3a2210220.mp3",w=r.p+"ba320d5b0b54658e943d16f5476accc2.mp3";function P(e){const n=document.querySelector("body"),r=new Audio(S),t=new Audio(w);"computer"!==e.name?r.play():t.play(),n.innerHTML=`<h1>${e.name[0].toUpperCase()+e.name.slice(1)} won!</h1>`}function H(e,n,r){const t=[e-1,n],o=[e+1,n],a=[e,n-1],i=[e,n+1];let l=[];return t[0]<0||t[0]>9||t[1]<0||t[1]>9||l.push(t.join(",")),o[0]<0||o[0]>9||o[1]<0||o[1]>9||l.push(o.join(",")),a[0]<0||a[0]>9||a[1]<0||a[1]>9||l.push(a.join(",")),i[0]<0||i[0]>9||i[1]<0||i[1]>9||l.push(i.join(",")),l=l.filter((e=>!r.gameboard.cellsHit.includes(e))),l}let T=[],L=[];const N=r.p+"daeaeda56b97891d3bc1eeb700d8af2c.mp3",$=r.p+"ded3288812ddc7b789568dfe1694b2fa.mp3",z=r.p+"27e386691db3adf23d5db8529ff21149.mp3",M=new Audio(N),q=new Audio(z),j=new Audio($);function O(e,n){let r="player";const t=document.querySelector(".board.computer");function o(a){"player"===r&&(t.removeEventListener("click",o),M.play(),setTimeout((()=>{const{coordinates:i}=a.target.dataset,l=i.split(",");n.gameboard.cellsHit.includes(i)||(n.gameboard.receiveAttack(i),n.gameboard.board[l[0]][l[1]].isOccupied?q.play():j.play(),v(n),n.gameboard.checkAllSunk()?P(e):(r="computer",setTimeout((()=>{if("computer"===r){M.play();const a=function(e){if(T.length>0){if(L.length>=2){let e=L[0],n=L[1];e=e.split(","),n=n.split(",");const r=e[0],t=n[0],o=e[1],a=n[1];if(r===t)for(let e=0;e<T.length;e+=1){let n=T[e];n=n.split(","),n[0]!==r&&(T.splice(e,1),e-=1)}else if(o===a)for(let e=0;e<T.length;e+=1){let n=T[e];n=n.split(","),n[1]!==o&&(T.splice(e,1),e-=1)}}const n=T[T.length-1],r=n.split(","),t=+r[0],o=+r[1];if(e.gameboard.board[t][o].isOccupied){T.pop(),L.push(`${t},${o}`);const r=H(t,o,e);T=T.concat(r);const a=e.gameboard.board[t][o].occupier,i=e.gameboard.ships[a];return i.length-i.timesHit==1&&(T=[],L=[]),n}return T.pop(),n}let n,r,t;for(;!t||e.gameboard.cellsHit.includes(t);)n=Math.round(9*Math.random()),r=Math.round(9*Math.random()),t=`${n},${r}`;if(e.gameboard.board[n][r].isOccupied){L.push(`${n},${r}`);const t=H(n,r,e);T=T.concat(t)}return t}(e);setTimeout((()=>{const i=a.split(",");e.gameboard.receiveAttack(a),e.gameboard.board[i[0]][i[1]].isOccupied?q.play():j.play(),k(e),e.gameboard.checkAllSunk()?P(n):(r="player",t.addEventListener("click",o))}),2e3)}}),2400)))}),2e3))}t.addEventListener("click",o)}function Y(e,n){const r=document.querySelector(".player1.board"),t=document.querySelector(".player2.board");r.innerHTML="",t.innerHTML="",e.gameboard.board.forEach(((n,t)=>{n.forEach(((n,o)=>{const a=document.createElement("div");a.classList.add("cell"),a.style.height="40px",a.dataset.coordinates=`${t},${o}`,n.isOccupied&&e.gameboard.ships[n.occupier].isSunk()?a.style.backgroundColor="yellow":n.isOccupied&&n.isHit?(a.style.backgroundColor="midnightBlue",a.style.color="yellow",a.textContent="HIT"):!n.isOccupied&&n.isHit&&(a.style.backgroundColor="gray"),r.appendChild(a)}))})),n.gameboard.board.forEach(((e,r)=>{e.forEach(((e,o)=>{const a=document.createElement("div");a.classList.add("cell"),a.style.height="40px",a.dataset.coordinates=`${r},${o}`,e.isOccupied&&n.gameboard.ships[e.occupier].isSunk()?a.style.backgroundColor="yellow":e.isOccupied&&e.isHit?(a.style.backgroundColor="midnightBlue",a.style.color="yellow",a.textContent="HIT"):!e.isOccupied&&e.isHit&&(a.style.backgroundColor="gray"),t.appendChild(a)}))}))}function I(e){document.querySelector(".turns").textContent=`${e}'s turn`}var U=r(849),D={};D.styleTagTransform=m(),D.setAttributes=d(),D.insert=s().bind(null,"head"),D.domAPI=i(),D.insertStyleElement=p(),o()(U.A,D),U.A&&U.A.locals&&U.A.locals;var R=r(216),V={};V.styleTagTransform=m(),V.setAttributes=d(),V.insert=s().bind(null,"head"),V.domAPI=i(),V.insertStyleElement=p(),o()(R.A,V),R.A&&R.A.locals&&R.A.locals;var Z=r(636),G={};G.styleTagTransform=m(),G.setAttributes=d(),G.insert=s().bind(null,"head"),G.domAPI=i(),G.insertStyleElement=p(),o()(Z.A,G),Z.A&&Z.A.locals&&Z.A.locals,async function(){const e=await new Promise((e=>{const n=document.querySelector("body"),r=document.createElement("dialog");r.classList.add("chooseGameType"),r.innerHTML='\n    <div class="choices">\n    <div class="choice computer">Play with computer</div>\n    <div class="choice friend">Play with friend</div>\n    </div>\n  ',n.prepend(r),document.querySelector(".choices").addEventListener("click",(n=>{n.target.classList.contains("computer")?(r.close(),r.remove(),e("computer")):n.target.classList.contains("friend")&&(r.close(),r.remove(),e("friend"))})),r.showModal()}));if("computer"===e)!async function(e){!function(e){const n=document.querySelector(".turns"),r=document.createElement("div"),t=`<div class="playerDisplay">\n            <h3>${e}</h3>\n            <div class="player board"></div>\n          </div>\n          <div class="computer">\n            <h3>Computer</h3>\n            <div class="computer board"></div>\n          </div>`;r.classList.add("boards"),r.innerHTML=t,n.insertAdjacentElement("afterend",r)}(e);const n=new y(e),r=new y,t=await B(e);n.placeAllShips(t),function(e){const n=[{type:"Carrier",length:5},{type:"Battleship",length:4},{type:"Cruiser",length:3},{type:"Submarine",length:3},{type:"Destroyer",length:2}];for(let r=0;r<n.length;r+=1){const t=Math.round(Math.random())?"vertical":"horizontal",o=`${Math.round(9*Math.random())},${Math.round(9*Math.random())}`;e.gameboard.placeShip(n[r].length,o,t,n[r].type),e.gameboard.ships.length!==r+1&&(r-=1)}}(r),k(n),v(r),O(n,r)}(await new Promise((e=>{const n=document.querySelector("body"),r=document.createElement("dialog");r.classList.add("singlePlayerName"),r.innerHTML='<form>\n      <div class="input-container">\n        <label for="name">Enter your name</label>\n        <input type="text" id="name" required />\n      </div>\n      <button>SUBMIT</button>\n    </form>',r.querySelector("form").addEventListener("submit",(n=>{n.preventDefault(),e(n.target.name.value),r.close(),r.remove()})),n.prepend(r),r.showModal()})));else if("friend"===e){const e=await new Promise((e=>{const n=document.querySelector("body"),r=document.createElement("dialog");r.classList.add("doublePlayerName"),r.innerHTML='<form>\n        <div class="input-container">\n          <label for="name1">Player 1 Name: </label>\n          <input type="text" id="name1" name="name1" required />\n        </div>\n        <div class="input-container">\n          <label for="name2">Player 2 Name: </label>\n          <input type="text" id="name2" name="name2" required />\n        </div>\n        <button>Submit</button>\n      </form>',r.querySelector("form").addEventListener("submit",(n=>{n.preventDefault();const t={player1:n.target.name1.value,player2:n.target.name2.value};e(t),r.close(),r.remove()})),n.prepend(r),r.showModal()}));!async function(e,n){!function(e,n){const r=document.querySelector(".turns"),t=document.createElement("div"),o=`<div class="player1Display">\n            <h3>${e}</h3>\n            <div class="player1 board"></div>\n          </div>\n          <div class="player2Display">\n            <h3>${n}</h3>\n            <div class="player2 board"></div>\n          </div>`;t.classList.add("boards"),t.innerHTML=o,r.insertAdjacentElement("afterend",t)}(e,n);const r=new y(e),t=new y(n),o=await B(e),a=await B(n);r.placeAllShips(o),t.placeAllShips(a),Y(r,t),function(e,n){let r=e.name;I(e.name);const t=document.querySelector(".board.player1"),o=document.querySelector(".board.player2");function a(l){if(r===n.name){const{coordinates:s}=l.target.dataset;if(e.gameboard.cellsHit.includes(s))return;if(e.gameboard.receiveAttack(s),e.gameboard.checkAllSunk())return void P(n);r=e.name,I(e.name),t.removeEventListener("click",a),o.addEventListener("click",i),Y(e,n)}}function i(l){if(r===e.name){const{coordinates:s}=l.target.dataset;if(n.gameboard.cellsHit.includes(s))return;if(n.gameboard.receiveAttack(s),n.gameboard.checkAllSunk())return void P(e);r=n.name,I(n.name),o.removeEventListener("click",i),t.addEventListener("click",a),Y(e,n)}}o.addEventListener("click",i)}(r,t)}(e.player1,e.player2)}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,