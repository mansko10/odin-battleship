(()=>{"use strict";var e={992:(e,n,t)=>{t.d(n,{A:()=>s});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([e.id,".game * {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.game h1 {\n  text-align: center;\n  margin: 2rem;\n}\n\n.game .boards h3 {\n  text-align: center;\n  margin: 1rem;\n  user-select: none;\n}\n\n.game .boards {\n  display: flex;\n  justify-content: center;\n  column-gap: 50px;\n}\n\n.game .board {\n  box-sizing: content-box;\n  display: flex;\n  flex-wrap: wrap;\n  width: 400px;\n  height: 400px;\n}\n\n.game .player.board,\n.computer.board {\n  flex: 0 1 400px;\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n}\n\n.game .cell {\n  flex: 0 0 40px;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n","",{version:3,sources:["webpack://./src/styles/game.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;;EAEE,eAAe;EACf,2BAA2B;EAC3B,4BAA4B;AAC9B;;AAEA;EACE,cAAc;EACd,6BAA6B;EAC7B,8BAA8B;;EAE9B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB",sourcesContent:[".game * {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.game h1 {\r\n  text-align: center;\r\n  margin: 2rem;\r\n}\r\n\r\n.game .boards h3 {\r\n  text-align: center;\r\n  margin: 1rem;\r\n  user-select: none;\r\n}\r\n\r\n.game .boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  column-gap: 50px;\r\n}\r\n\r\n.game .board {\r\n  box-sizing: content-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.game .player.board,\r\n.computer.board {\r\n  flex: 0 1 400px;\r\n  border-top: 1px solid black;\r\n  border-left: 1px solid black;\r\n}\r\n\r\n.game .cell {\r\n  flex: 0 0 40px;\r\n  border-right: 1px solid black;\r\n  border-bottom: 1px solid black;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n"],sourceRoot:""}]);const s=a},247:(e,n,t)=>{t.d(n,{A:()=>s});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([e.id,"* {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nh1 {\n  text-align: center;\n  margin: 2rem;\n}\n\n.boards h3 {\n  text-align: center;\n  margin: 1rem;\n  user-select: none;\n}\n\n.boards {\n  display: flex;\n  justify-content: center;\n  column-gap: 50px;\n}\n\n.board {\n  box-sizing: content-box;\n  display: flex;\n  flex-wrap: wrap;\n  width: 400px;\n  height: 400px;\n}\n\n.player.board,\n.computer.board,\n.placeShip.board {\n  flex: 0 1 400px;\n  /* border: 1px solid black; */\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n\n  user-select: none;\n}\n\ndialog {\n  text-align: center;\n  background-color: ghostwhite;\n  margin: auto;\n  border: none;\n  outline: none;\n  padding: 50px;\n}\n\n.cell {\n  flex: 0 0 40px;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.greenColor {\n  background-color: green;\n}\n\n.definitelyPlaced {\n  background-color: darkgreen;\n}\n","",{version:3,sources:["webpack://./src/styles/modal.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;;;EAGE,eAAe;EACf,6BAA6B;EAC7B,2BAA2B;EAC3B,4BAA4B;;EAE5B,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,4BAA4B;EAC5B,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,aAAa;AACf;;AAEA;EACE,cAAc;EACd,6BAA6B;EAC7B,8BAA8B;;EAE9B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,2BAA2B;AAC7B",sourcesContent:["* {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  margin: 2rem;\r\n}\r\n\r\n.boards h3 {\r\n  text-align: center;\r\n  margin: 1rem;\r\n  user-select: none;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  column-gap: 50px;\r\n}\r\n\r\n.board {\r\n  box-sizing: content-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.player.board,\r\n.computer.board,\r\n.placeShip.board {\r\n  flex: 0 1 400px;\r\n  /* border: 1px solid black; */\r\n  border-top: 1px solid black;\r\n  border-left: 1px solid black;\r\n\r\n  user-select: none;\r\n}\r\n\r\ndialog {\r\n  text-align: center;\r\n  background-color: ghostwhite;\r\n  margin: auto;\r\n  border: none;\r\n  outline: none;\r\n  padding: 50px;\r\n}\r\n\r\n.cell {\r\n  flex: 0 0 40px;\r\n  border-right: 1px solid black;\r\n  border-bottom: 1px solid black;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.greenColor {\r\n  background-color: green;\r\n}\r\n\r\n.definitelyPlaced {\r\n  background-color: darkgreen;\r\n}\r\n"],sourceRoot:""}]);const s=a},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],d=i[c]||0,p="".concat(c," ").concat(d);i[c]=d+1;var u=t(p),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(A);else{var h=o(A,r);r.byIndex=s,n.splice(s,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var l=r(e,o),c=0;c<i.length;c++){var d=t(i[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=l}}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.nc=void 0;var r=t(72),o=t.n(r),i=t(825),a=t.n(i),s=t(659),l=t.n(s),c=t(56),d=t.n(c),p=t(540),u=t.n(p),A=t(113),h=t.n(A),f=t(992),g={};g.styleTagTransform=h(),g.setAttributes=d(),g.insert=l().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=u(),o()(f.A,g),f.A&&f.A.locals&&f.A.locals;var b=t(247),m={};m.styleTagTransform=h(),m.setAttributes=d(),m.insert=l().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=u(),o()(b.A,m),b.A&&b.A.locals&&b.A.locals;class E{constructor(e,n,t){this.length=e,this.timesHit=0,this.hasBeenSunk=!1,this.startingCoordinate=n,this.identifier=t}hit(){this.timesHit+=1,this.isSunk()}isSunk(){return this.timesHit===this.length?(this.hasBeenSunk=!0,this.hasBeenSunk):this.hasBeenSunk}}class y{constructor(){this.board=function(){const e=[];for(let n=0;n<10;n++){e[n]=[];for(let t=0;t<10;t++)e[n][t]={coordinates:`${n},${t}`,isOccupied:!1,isHit:!1,occupier:null}}return e}(),this.ships=[],this.cellsHit=[]}#e(e,n,t){let r=!0;for(let o=n;o<n+t;o++)if(void 0===this.board[e][o]||this.board[e][o].isOccupied){r=!1;break}return r}#n(e,n){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.ships.length;const r=new E(e,n,t),o=+(n=n.split(","))[0],i=+n[1];if(this.#e(o,i,e)){for(let n=i;n<i+e;n++)this.board[o][n].isOccupied=!0,this.board[o][n].occupier=r.identifier;this.ships.push(r)}}#t(e,n,t){let r=!0;for(let o=e;o<e+t;o++)if(void 0===this.board[o]||this.board[o][n].isOccupied){r=!1;break}return r}#r(e,n){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.ships.length;const r=new E(e,n,t),o=+(n=n.split(","))[0],i=+n[1];if(this.#t(o,i,e)){for(let n=o;n<o+e;n++)this.board[n][i].isOccupied=!0,this.board[n][i].occupier=r.identifier;this.ships.push(r)}}placeShip(e,n,t){"horizontal"===t?this.#n(e,n):"vertical"===t&&this.#r(e,n)}updateCellsHit(){this.cellsHit=[];for(let e=0;e<10;e++)for(let n=0;n<10;n++)!0===this.board[e][n].isHit&&this.cellsHit.push(this.board[e][n].coordinates)}receiveAttack(e){const n=(e=e.split(","))[0],t=e[1];if(!0!==this.board[n][t].isHit&&(this.board[n][t].isHit=!0,this.cellsHit.push(e.join(",")),!0===this.board[n][t].isOccupied)){const e=this.board[n][t].occupier,r=this.ships.findIndex((n=>n.identifier===e));this.ships[r].hit()}}checkAllSunk(){let e=0,n=this.ships.length;return this.ships.forEach((n=>{!0===n.hasBeenSunk&&(e+=1)})),e===n}}class C{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"computer";this.name=e,this.gameboard=new y}}function x(e){const n=document.querySelector(".player.board");n.innerHTML="",e.gameboard.board.forEach(((t,r)=>{t.forEach(((t,o)=>{const i=document.createElement("div");i.classList.add("cell"),i.style.height="40px",i.dataset.coordinates=`${r},${o}`,t.isOccupied&&e.gameboard.ships[t.occupier].isSunk()?i.style.backgroundColor="yellow":t.isOccupied&&t.isHit?(i.style.backgroundColor="midnightBlue",i.style.color="yellow",i.textContent="HIT"):!t.isOccupied&&t.isHit?i.style.backgroundColor="gray":t.isOccupied&&(i.style.backgroundColor="midnightBlue"),n.appendChild(i)}))}))}function B(e){const n=document.querySelector(".computer.board");n.innerHTML="",e.gameboard.board.forEach(((t,r)=>{t.forEach(((t,o)=>{const i=document.createElement("div");i.classList.add("cell"),i.style.height="40px",i.dataset.coordinates=`${r},${o}`,t.isOccupied&&e.gameboard.ships[t.occupier].isSunk()?i.style.backgroundColor="yellow":t.isOccupied&&t.isHit?i.style.backgroundColor="midnightBlue":!t.isOccupied&&t.isHit&&(i.style.backgroundColor="gray"),n.appendChild(i)}))}))}function v(e,n,t){const r=[e-1,n],o=[e+1,n],i=[e,n-1],a=[e,n+1];let s=[];return r[0]<0||r[0]>9||r[1]<0||r[1]>9||s.push(r.join(",")),o[0]<0||o[0]>9||o[1]<0||o[1]>9||s.push(o.join(",")),i[0]<0||i[0]>9||i[1]<0||i[1]>9||s.push(i.join(",")),a[0]<0||a[0]>9||a[1]<0||a[1]>9||s.push(a.join(",")),s=s.filter((e=>!t.gameboard.cellsHit.includes(e))),s}let k,S=[],w=[];const H=t.p+"ea9232e1a4e0e645ef4df0b3a2210220.mp3",$=t.p+"ba320d5b0b54658e943d16f5476accc2.mp3";function T(e){const n=document.querySelector("body"),t=new Audio(H),r=new Audio($);"computer"!==e.name?t.play():r.play(),n.innerHTML=`<h1>${e.name[0].toUpperCase()+e.name.slice(1)} won!</h1>`}const L=t.p+"daeaeda56b97891d3bc1eeb700d8af2c.mp3",z=t.p+"ded3288812ddc7b789568dfe1694b2fa.mp3",O=t.p+"27e386691db3adf23d5db8529ff21149.mp3";function M(e,n){let t="player";const r=document.querySelector(".board.computer");function o(i){if("player"===t){const a=new Audio(L);r.removeEventListener("click",o),a.play(),setTimeout((()=>{const a=i.target.dataset.coordinates,s=a.split(",");n.gameboard.cellsHit.includes(a)||(n.gameboard.receiveAttack(a),n.gameboard.board[s[0]][s[1]].isOccupied?new Audio(O).play():new Audio(z).play(),B(n),n.gameboard.checkAllSunk()?T(e):(t="computer",setTimeout((()=>{if("computer"===t){new Audio(L).play();const i=function(e){if(S.length>0){if(w.length>=2){console.log(w);let e=w[0],n=w[1];e=e.split(","),n=n.split(",");let t=e[0],r=n[0],o=e[1],i=n[1];if(t===r){console.log("ITS HORIZONTAL",t,r);for(let e=0;e<S.length;e++){let n=S[e];n=n.split(","),n[0]!==t&&(console.log("selective axis horizontal"),S.splice(e,1),e--)}}else if(o===i){console.log("ITS VERTICAL"),console.log(S,"ADJACENTS BEFORE SPLICE");for(let e=0;e<S.length;e++){let n=S[e];n=n.split(","),n[1]!==o&&(console.log("selective axis vertical"),S.splice(e,1),e--)}console.log(S,"ADJACENTS AFTER SPLICE")}}const n=S[S.length-1],t=n.split(","),r=+t[0],o=+t[1];if(e.gameboard.board[r][o].isOccupied){const t=e.gameboard.board[r][o].occupier,i=e.gameboard.ships[t];w.push(`${r},${o}`);let a=v(r,o,e);return S.pop(),S=S.concat(a),i.length-i.timesHit==1&&(S=[],w=[],k=void 0),console.log(S),n}return S.pop(),console.log(S),n}{let n,t,r;for(;!r||e.gameboard.cellsHit.includes(r);)n=Math.round(9*Math.random()),t=Math.round(9*Math.random()),r=`${n},${t}`;if(e.gameboard.board[n][t].isOccupied){w.push(`${n},${t}`);let r=v(n,t,e);S=S.concat(r),console.log(S)}return r}}(e);setTimeout((()=>{const a=i.split(",");e.gameboard.receiveAttack(i),e.gameboard.board[a[0]][a[1]].isOccupied?new Audio(O).play():new Audio(z).play(),x(e),e.gameboard.checkAllSunk()?T(n):(t="player",r.addEventListener("click",o))}),3e3)}}),3e3)))}),2e3)}}r.addEventListener("click",o)}const j=new C("player"),P=new C;function N(e){if(!e.length)return;const n=document.querySelector("dialog").querySelector("#shipName");n.style.textDecoration="underline",n.textContent=e[0].name}!function(){const e=document.querySelector("body");window.addEventListener("load",(n=>{const t=document.createElement("dialog");t.innerHTML='<button>Change to vertical</button><div>\n        <h3>Player</h3>\n        <h3>Please place your <span id="shipName"></span></h3>\n        <div class="placeShip board"></div>\n      </div>',e.prepend(t);let r="horizontal";console.log(r);const o=document.querySelector("dialog button");o.addEventListener("click",(e=>{"horizontal"===r?(o.textContent="Change to horizontal",r="vertical"):"vertical"===r&&(o.textContent="Change to vertical",r="horizontal")}));const i=document.querySelector(".placeShip.board");for(let e=0;e<10;e++)for(let n=0;n<10;n++){const t=document.createElement("div");t.classList.add("cell"),t.dataset.coordinates=`${e},${n}`,i.appendChild(t)}const a=document.querySelectorAll(".placeShip.board .cell"),s=[{name:"Carrier",length:5},{name:"Battleship",length:4},{name:"Cruiser",length:3},{name:"Submarine",length:3},{name:"Destroyer",length:2}];N(s);const l=[];a.forEach((e=>{e.addEventListener("mouseover",(()=>{const n=[],t=e.dataset.coordinates.split(","),o=Number(t[0]),i=Number(t[1]);if("horizontal"===r)for(let e=i;e<i+s[0].length&&!(e>9);e++)n.push(`${o},${e}`);else if("vertical"===r)for(let e=o;e<o+s[0].length&&!(e>9);e++)n.push(`${e},${i}`);n.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.add("greenColor")}))})),e.addEventListener("mouseout",(n=>{const t=[],o=e.dataset.coordinates.split(","),i=Number(o[0]),a=Number(o[1]);if("horizontal"===r)for(let e=a;e<a+s[0].length&&!(e>9);e++)t.push(`${i},${e}`);else if("vertical"===r)for(let e=i;e<i+s[0].length&&!(e>9);e++)t.push(`${e},${a}`);t.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.remove("greenColor")}))})),e.addEventListener("click",(n=>{const o=[],i=e.dataset.coordinates.split(","),a=Number(i[0]),c=Number(i[1]);if("horizontal"===r)for(let e=c;e<c+s[0].length;e++){if(e>9)return;o.push(`${a},${e}`)}else if("vertical"===r)for(let e=a;e<a+s[0].length;e++){if(e>9)return;o.push(`${e},${c}`)}let d=!0;if(o.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.contains("definitelyPlaced")&&(d=!1)})),!d)return;o.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.add("definitelyPlaced")}));const p={length:s[0].length,startingCoordinate:e.dataset.coordinates,axis:r};l.push(p),s.shift(),N(s),0===s.length&&(t.close(),t.remove(),function(e){e.forEach((e=>{j.gameboard.placeShip(e.length,e.startingCoordinate,e.axis)})),function(e){const n=[5,4,3,3,2];for(let t=0;t<n.length;t++){const r=Math.round(Math.random())?"vertical":"horizontal",o=`${Math.round(9*Math.random())},${Math.round(9*Math.random())}`;e.gameboard.placeShip(n[t],o,r),e.gameboard.ships.length!==t+1&&t--}console.log(e.gameboard.ships.length)}(P),x(j),B(P),M(j,P)}(l))}))})),t.showModal()}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MUIsRUFBRWlELEtBQUssSUdadkQsU0FBNEIyQixHQUN6QyxNQUFNMkQsRUFBYyxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FFakMsSUFBSyxJQUFJcE8sRUFBSSxFQUFHQSxFQUFJb08sRUFBWXRPLE9BQVFFLElBQUssQ0FDM0MsTUFBTTRPLEVBQVl0QixLQUFLQyxNQUFNRCxLQUFLRSxVQUFZLFdBQWEsYUFJckR6RixFQUFjLEdBRlJ1RixLQUFLQyxNQUFzQixFQUFoQkQsS0FBS0UsYUFDYkYsS0FBS0MsTUFBc0IsRUFBaEJELEtBQUtFLFlBRy9CL0MsRUFBU2hCLFVBQVVaLFVBQVV1RixFQUFZcE8sR0FBSStILEVBQWE2RyxHQUV0RG5FLEVBQVNoQixVQUFVckIsTUFBTXRJLFNBQVdFLEVBQUksR0FDMUNBLEdBRUosQ0FFQXdNLFFBQVFDLElBQUloQyxFQUFTaEIsVUFBVXJCLE1BQU10SSxPQUN2QyxDSEhFK08sQ0FBbUJwRSxHQUNuQmYsRUFBbUJDLEdBQ25CYSxFQUFxQkMsR0FDckJtQixFQUFLakMsRUFBUWMsRUFDZixDRWdLVXFFLENBQVVULEdBQ1osR0FDQSxJQUdKUCxFQUFPaUIsV0FBVyxHQUV0QixDRXZMQUMsRSIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvZ2FtZS5jc3MiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9tb2RhbC5jc3MiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL2dhbWUuY3NzP2Y4MTQiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9tb2RhbC5jc3M/MDdiZSIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvY2xhc3Nlcy9TaGlwLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9jbGFzc2VzL0dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvY2xhc3Nlcy9QbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2RvbS9kaXNwbGF5UGxheWVyQm9hcmQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2RvbS9kaXNwbGF5Q29tcHV0ZXJCb2FyZC5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvdXRpbC9nZW5BZGphY2VudC5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvdXRpbC9nZW5lcmF0ZUNvb3JkaW5hdGUuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NvdW5kcy92aWN0b3J5Lm1wMyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvc291bmRzL2RlZmVhdC5tcDMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2RvbS9lbmRHYW1lLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9zb3VuZHMvY2Fubm9uRmlyZS5tcDMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NvdW5kcy93YXRlclNwbGFzaC5tcDMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NvdW5kcy9leHBsb3Npb24ubXAzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9kb20vcGxheS5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvdXRpbC9zdGFydEdhbWUuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3V0aWwvdXBkYXRlU2hpcE5hbWUuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2RvbS9wbGFjZVBsYXllclNoaXBzLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy91dGlsL3BsYWNlQ29tcHV0ZXJTaGlwcy5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5nYW1lICoge1xyXG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xyXG4gIG1hcmdpbjogMDtcclxuICBwYWRkaW5nOiAwO1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbn1cclxuXHJcbi5nYW1lIGgxIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgbWFyZ2luOiAycmVtO1xyXG59XHJcblxyXG4uZ2FtZSAuYm9hcmRzIGgzIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgbWFyZ2luOiAxcmVtO1xyXG4gIHVzZXItc2VsZWN0OiBub25lO1xyXG59XHJcblxyXG4uZ2FtZSAuYm9hcmRzIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGNvbHVtbi1nYXA6IDUwcHg7XHJcbn1cclxuXHJcbi5nYW1lIC5ib2FyZCB7XHJcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgd2lkdGg6IDQwMHB4O1xyXG4gIGhlaWdodDogNDAwcHg7XHJcbn1cclxuXHJcbi5nYW1lIC5wbGF5ZXIuYm9hcmQsXHJcbi5jb21wdXRlci5ib2FyZCB7XHJcbiAgZmxleDogMCAxIDQwMHB4O1xyXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCBibGFjaztcclxuICBib3JkZXItbGVmdDogMXB4IHNvbGlkIGJsYWNrO1xyXG59XHJcblxyXG4uZ2FtZSAuY2VsbCB7XHJcbiAgZmxleDogMCAwIDQwcHg7XHJcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgYmxhY2s7XHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGJsYWNrO1xyXG5cclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbn1cclxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL2dhbWUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UseUNBQXlDO0VBQ3pDLFNBQVM7RUFDVCxVQUFVO0VBQ1Ysc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsYUFBYTtFQUNiLGVBQWU7RUFDZixZQUFZO0VBQ1osYUFBYTtBQUNmOztBQUVBOztFQUVFLGVBQWU7RUFDZiwyQkFBMkI7RUFDM0IsNEJBQTRCO0FBQzlCOztBQUVBO0VBQ0UsY0FBYztFQUNkLDZCQUE2QjtFQUM3Qiw4QkFBOEI7O0VBRTlCLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0FBQ3JCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5nYW1lICoge1xcclxcbiAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG59XFxyXFxuXFxyXFxuLmdhbWUgaDEge1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgbWFyZ2luOiAycmVtO1xcclxcbn1cXHJcXG5cXHJcXG4uZ2FtZSAuYm9hcmRzIGgzIHtcXHJcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gIG1hcmdpbjogMXJlbTtcXHJcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uZ2FtZSAuYm9hcmRzIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGNvbHVtbi1nYXA6IDUwcHg7XFxyXFxufVxcclxcblxcclxcbi5nYW1lIC5ib2FyZCB7XFxyXFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxuICB3aWR0aDogNDAwcHg7XFxyXFxuICBoZWlnaHQ6IDQwMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZ2FtZSAucGxheWVyLmJvYXJkLFxcclxcbi5jb21wdXRlci5ib2FyZCB7XFxyXFxuICBmbGV4OiAwIDEgNDAwcHg7XFxyXFxuICBib3JkZXItdG9wOiAxcHggc29saWQgYmxhY2s7XFxyXFxuICBib3JkZXItbGVmdDogMXB4IHNvbGlkIGJsYWNrO1xcclxcbn1cXHJcXG5cXHJcXG4uZ2FtZSAuY2VsbCB7XFxyXFxuICBmbGV4OiAwIDAgNDBweDtcXHJcXG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIGJsYWNrO1xcclxcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGJsYWNrO1xcclxcblxcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqIHtcclxuICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogMDtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcblxyXG5oMSB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIG1hcmdpbjogMnJlbTtcclxufVxyXG5cclxuLmJvYXJkcyBoMyB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIG1hcmdpbjogMXJlbTtcclxuICB1c2VyLXNlbGVjdDogbm9uZTtcclxufVxyXG5cclxuLmJvYXJkcyB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBjb2x1bW4tZ2FwOiA1MHB4O1xyXG59XHJcblxyXG4uYm9hcmQge1xyXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC13cmFwOiB3cmFwO1xyXG4gIHdpZHRoOiA0MDBweDtcclxuICBoZWlnaHQ6IDQwMHB4O1xyXG59XHJcblxyXG4ucGxheWVyLmJvYXJkLFxyXG4uY29tcHV0ZXIuYm9hcmQsXHJcbi5wbGFjZVNoaXAuYm9hcmQge1xyXG4gIGZsZXg6IDAgMSA0MDBweDtcclxuICAvKiBib3JkZXI6IDFweCBzb2xpZCBibGFjazsgKi9cclxuICBib3JkZXItdG9wOiAxcHggc29saWQgYmxhY2s7XHJcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCBibGFjaztcclxuXHJcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbn1cclxuXHJcbmRpYWxvZyB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGJhY2tncm91bmQtY29sb3I6IGdob3N0d2hpdGU7XHJcbiAgbWFyZ2luOiBhdXRvO1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBvdXRsaW5lOiBub25lO1xyXG4gIHBhZGRpbmc6IDUwcHg7XHJcbn1cclxuXHJcbi5jZWxsIHtcclxuICBmbGV4OiAwIDAgNDBweDtcclxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCBibGFjaztcclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgYmxhY2s7XHJcblxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxufVxyXG5cclxuLmdyZWVuQ29sb3Ige1xyXG4gIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xyXG59XHJcblxyXG4uZGVmaW5pdGVseVBsYWNlZCB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogZGFya2dyZWVuO1xyXG59XHJcbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9tb2RhbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSx5Q0FBeUM7RUFDekMsU0FBUztFQUNULFVBQVU7RUFDVixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsWUFBWTtBQUNkOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLHVCQUF1QjtFQUN2QixhQUFhO0VBQ2IsZUFBZTtFQUNmLFlBQVk7RUFDWixhQUFhO0FBQ2Y7O0FBRUE7OztFQUdFLGVBQWU7RUFDZiw2QkFBNkI7RUFDN0IsMkJBQTJCO0VBQzNCLDRCQUE0Qjs7RUFFNUIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLDRCQUE0QjtFQUM1QixZQUFZO0VBQ1osWUFBWTtFQUNaLGFBQWE7RUFDYixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsNkJBQTZCO0VBQzdCLDhCQUE4Qjs7RUFFOUIsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSwyQkFBMkI7QUFDN0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxyXFxuICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbn1cXHJcXG5cXHJcXG5oMSB7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICBtYXJnaW46IDJyZW07XFxyXFxufVxcclxcblxcclxcbi5ib2FyZHMgaDMge1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgbWFyZ2luOiAxcmVtO1xcclxcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5ib2FyZHMge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgY29sdW1uLWdhcDogNTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmJvYXJkIHtcXHJcXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gIHdpZHRoOiA0MDBweDtcXHJcXG4gIGhlaWdodDogNDAwcHg7XFxyXFxufVxcclxcblxcclxcbi5wbGF5ZXIuYm9hcmQsXFxyXFxuLmNvbXB1dGVyLmJvYXJkLFxcclxcbi5wbGFjZVNoaXAuYm9hcmQge1xcclxcbiAgZmxleDogMCAxIDQwMHB4O1xcclxcbiAgLyogYm9yZGVyOiAxcHggc29saWQgYmxhY2s7ICovXFxyXFxuICBib3JkZXItdG9wOiAxcHggc29saWQgYmxhY2s7XFxyXFxuICBib3JkZXItbGVmdDogMXB4IHNvbGlkIGJsYWNrO1xcclxcblxcclxcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbmRpYWxvZyB7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBnaG9zdHdoaXRlO1xcclxcbiAgbWFyZ2luOiBhdXRvO1xcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgb3V0bGluZTogbm9uZTtcXHJcXG4gIHBhZGRpbmc6IDUwcHg7XFxyXFxufVxcclxcblxcclxcbi5jZWxsIHtcXHJcXG4gIGZsZXg6IDAgMCA0MHB4O1xcclxcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgYmxhY2s7XFxyXFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgYmxhY2s7XFxyXFxuXFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uZ3JlZW5Db2xvciB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcXHJcXG59XFxyXFxuXFxyXFxuLmRlZmluaXRlbHlQbGFjZWQge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogZGFya2dyZWVuO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHtcblx0XHRcdHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKGkgPiAtMSAmJiAoIXNjcmlwdFVybCB8fCAhL15odHRwKHM/KTovLnRlc3Qoc2NyaXB0VXJsKSkpIHNjcmlwdFVybCA9IHNjcmlwdHNbaS0tXS5zcmM7XG5cdFx0fVxuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9nYW1lLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZ2FtZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbW9kYWwuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tb2RhbC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTaGlwIHtcclxuICBjb25zdHJ1Y3RvcihsZW5ndGgsIHN0YXJ0aW5nQ29vcmRpbmF0ZSwgaWRlbnRpZmllcikge1xyXG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XHJcbiAgICB0aGlzLnRpbWVzSGl0ID0gMDtcclxuICAgIHRoaXMuaGFzQmVlblN1bmsgPSBmYWxzZTtcclxuICAgIHRoaXMuc3RhcnRpbmdDb29yZGluYXRlID0gc3RhcnRpbmdDb29yZGluYXRlO1xyXG4gICAgdGhpcy5pZGVudGlmaWVyID0gaWRlbnRpZmllcjtcclxuICB9XHJcblxyXG4gIGhpdCgpIHtcclxuICAgIHRoaXMudGltZXNIaXQgKz0gMTtcclxuICAgIHRoaXMuaXNTdW5rKCk7XHJcbiAgfVxyXG5cclxuICBpc1N1bmsoKSB7XHJcbiAgICBpZiAodGhpcy50aW1lc0hpdCA9PT0gdGhpcy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5oYXNCZWVuU3VuayA9IHRydWU7XHJcbiAgICAgIHJldHVybiB0aGlzLmhhc0JlZW5TdW5rO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmhhc0JlZW5TdW5rO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgU2hpcCBmcm9tIFwiLi9TaGlwLmpzXCI7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVCb2FyZCgpIHtcclxuICBjb25zdCByb3dzID0gMTA7XHJcbiAgY29uc3QgY29sdW1ucyA9IDEwO1xyXG4gIGNvbnN0IGJvYXJkID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcclxuICAgIGJvYXJkW2ldID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcclxuICAgICAgYm9hcmRbaV1bal0gPSB7XHJcbiAgICAgICAgY29vcmRpbmF0ZXM6IGAke2l9LCR7an1gLFxyXG4gICAgICAgIGlzT2NjdXBpZWQ6IGZhbHNlLFxyXG4gICAgICAgIGlzSGl0OiBmYWxzZSxcclxuICAgICAgICBvY2N1cGllcjogbnVsbCxcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBib2FyZDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZWJvYXJkIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuYm9hcmQgPSBjcmVhdGVCb2FyZCgpO1xyXG4gICAgdGhpcy5zaGlwcyA9IFtdO1xyXG4gICAgdGhpcy5jZWxsc0hpdCA9IFtdO1xyXG4gIH1cclxuXHJcbiAgI2NhbkJlUGxhY2VkSG9yaXpvbnRhbGx5KHJvdywgc3RhcnRpbmdDb2x1bW4sIGxlbmd0aCkge1xyXG4gICAgbGV0IHJlc3VsdCA9IHRydWU7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0aW5nQ29sdW1uOyBpIDwgc3RhcnRpbmdDb2x1bW4gKyBsZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAodGhpcy5ib2FyZFtyb3ddW2ldID09PSB1bmRlZmluZWQgfHwgdGhpcy5ib2FyZFtyb3ddW2ldLmlzT2NjdXBpZWQpIHtcclxuICAgICAgICByZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICAjcGxhY2VTaGlwSG9yaXpvbnRhbGx5KFxyXG4gICAgbGVuZ3RoLFxyXG4gICAgc3RhcnRpbmdDb29yZGluYXRlLFxyXG4gICAgaWRlbnRpZmllciA9IHRoaXMuc2hpcHMubGVuZ3RoLFxyXG4gICkge1xyXG4gICAgY29uc3Qgc2hpcCA9IG5ldyBTaGlwKGxlbmd0aCwgc3RhcnRpbmdDb29yZGluYXRlLCBpZGVudGlmaWVyKTtcclxuXHJcbiAgICBzdGFydGluZ0Nvb3JkaW5hdGUgPSBzdGFydGluZ0Nvb3JkaW5hdGUuc3BsaXQoXCIsXCIpO1xyXG5cclxuICAgIGNvbnN0IHJvdyA9ICtzdGFydGluZ0Nvb3JkaW5hdGVbMF07XHJcbiAgICBjb25zdCBzdGFydGluZ0NvbHVtbiA9ICtzdGFydGluZ0Nvb3JkaW5hdGVbMV07XHJcblxyXG4gICAgY29uc3QgY2FuQmVQbGFjZWQgPSB0aGlzLiNjYW5CZVBsYWNlZEhvcml6b250YWxseShcclxuICAgICAgcm93LFxyXG4gICAgICBzdGFydGluZ0NvbHVtbixcclxuICAgICAgbGVuZ3RoLFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoIWNhbkJlUGxhY2VkKSByZXR1cm47XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0aW5nQ29sdW1uOyBpIDwgc3RhcnRpbmdDb2x1bW4gKyBsZW5ndGg7IGkrKykge1xyXG4gICAgICAvKl5eXl5eXl5eXl5eXl5eIExFTkdUSCovXHJcbiAgICAgIHRoaXMuYm9hcmRbcm93XVtpXS5pc09jY3VwaWVkID0gdHJ1ZTtcclxuICAgICAgdGhpcy5ib2FyZFtyb3ddW2ldLm9jY3VwaWVyID0gc2hpcC5pZGVudGlmaWVyO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2hpcHMucHVzaChzaGlwKTtcclxuICB9XHJcblxyXG4gICNjYW5CZVBsYWNlZFZlcnRpY2FsbHkoc3RhcnRpbmdSb3csIGNvbHVtbiwgbGVuZ3RoKSB7XHJcbiAgICBsZXQgcmVzdWx0ID0gdHJ1ZTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gc3RhcnRpbmdSb3c7IGkgPCBzdGFydGluZ1JvdyArIGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICh0aGlzLmJvYXJkW2ldID09PSB1bmRlZmluZWQgfHwgdGhpcy5ib2FyZFtpXVtjb2x1bW5dLmlzT2NjdXBpZWQpIHtcclxuICAgICAgICByZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICAjcGxhY2VTaGlwVmVydGljYWxseShcclxuICAgIGxlbmd0aCxcclxuICAgIHN0YXJ0aW5nQ29vcmRpbmF0ZSxcclxuICAgIGlkZW50aWZpZXIgPSB0aGlzLnNoaXBzLmxlbmd0aCxcclxuICApIHtcclxuICAgIGNvbnN0IHNoaXAgPSBuZXcgU2hpcChsZW5ndGgsIHN0YXJ0aW5nQ29vcmRpbmF0ZSwgaWRlbnRpZmllcik7XHJcblxyXG4gICAgc3RhcnRpbmdDb29yZGluYXRlID0gc3RhcnRpbmdDb29yZGluYXRlLnNwbGl0KFwiLFwiKTtcclxuXHJcbiAgICBjb25zdCBzdGFydGluZ1JvdyA9ICtzdGFydGluZ0Nvb3JkaW5hdGVbMF07XHJcbiAgICBjb25zdCBjb2x1bW4gPSArc3RhcnRpbmdDb29yZGluYXRlWzFdO1xyXG5cclxuICAgIGNvbnN0IGNhbkJlUGxhY2VkID0gdGhpcy4jY2FuQmVQbGFjZWRWZXJ0aWNhbGx5KFxyXG4gICAgICBzdGFydGluZ1JvdyxcclxuICAgICAgY29sdW1uLFxyXG4gICAgICBsZW5ndGgsXHJcbiAgICApO1xyXG5cclxuICAgIGlmICghY2FuQmVQbGFjZWQpIHJldHVybjtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gc3RhcnRpbmdSb3c7IGkgPCBzdGFydGluZ1JvdyArIGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIC8qXl5eXl5eXl5eXl5eXl4gTEVOR1RIKi9cclxuICAgICAgdGhpcy5ib2FyZFtpXVtjb2x1bW5dLmlzT2NjdXBpZWQgPSB0cnVlO1xyXG4gICAgICB0aGlzLmJvYXJkW2ldW2NvbHVtbl0ub2NjdXBpZXIgPSBzaGlwLmlkZW50aWZpZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zaGlwcy5wdXNoKHNoaXApO1xyXG4gIH1cclxuXHJcbiAgcGxhY2VTaGlwKGxlbmd0aCwgc3RhcnRpbmdDb29yZGluYXRlLCBheGlzKSB7XHJcbiAgICBpZiAoYXhpcyA9PT0gXCJob3Jpem9udGFsXCIpIHtcclxuICAgICAgdGhpcy4jcGxhY2VTaGlwSG9yaXpvbnRhbGx5KGxlbmd0aCwgc3RhcnRpbmdDb29yZGluYXRlKTtcclxuICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgIHRoaXMuI3BsYWNlU2hpcFZlcnRpY2FsbHkobGVuZ3RoLCBzdGFydGluZ0Nvb3JkaW5hdGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlQ2VsbHNIaXQoKSB7XHJcbiAgICBjb25zdCByb3dzID0gMTA7XHJcbiAgICBjb25zdCBjb2x1bW5zID0gMTA7XHJcblxyXG4gICAgdGhpcy5jZWxsc0hpdCA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYm9hcmRbaV1bal0uaXNIaXQgPT09IHRydWUpIHtcclxuICAgICAgICAgIHRoaXMuY2VsbHNIaXQucHVzaCh0aGlzLmJvYXJkW2ldW2pdLmNvb3JkaW5hdGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlY2VpdmVBdHRhY2soY29vcmRpbmF0ZXMpIHtcclxuICAgIGNvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXMuc3BsaXQoXCIsXCIpO1xyXG4gICAgY29uc3Qgcm93ID0gY29vcmRpbmF0ZXNbMF07XHJcbiAgICBjb25zdCBjb2x1bW4gPSBjb29yZGluYXRlc1sxXTtcclxuXHJcbiAgICBpZiAodGhpcy5ib2FyZFtyb3ddW2NvbHVtbl0uaXNIaXQgPT09IHRydWUpIHJldHVybjtcclxuXHJcbiAgICB0aGlzLmJvYXJkW3Jvd11bY29sdW1uXS5pc0hpdCA9IHRydWU7XHJcbiAgICAvLyB0aGlzLnVwZGF0ZUNlbGxzSGl0KCk7XHJcbiAgICB0aGlzLmNlbGxzSGl0LnB1c2goY29vcmRpbmF0ZXMuam9pbihcIixcIikpO1xyXG5cclxuICAgIGlmICh0aGlzLmJvYXJkW3Jvd11bY29sdW1uXS5pc09jY3VwaWVkID09PSB0cnVlKSB7XHJcbiAgICAgIGNvbnN0IG9jY3VwaWVyID0gdGhpcy5ib2FyZFtyb3ddW2NvbHVtbl0ub2NjdXBpZXI7XHJcblxyXG4gICAgICBjb25zdCBpbmRleE9mT2NjdXBpZXIgPSB0aGlzLnNoaXBzLmZpbmRJbmRleCgoc2hpcCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBzaGlwLmlkZW50aWZpZXIgPT09IG9jY3VwaWVyO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuc2hpcHNbaW5kZXhPZk9jY3VwaWVyXS5oaXQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNoZWNrQWxsU3VuaygpIHtcclxuICAgIGxldCBzaGlwc1N1bmsgPSAwO1xyXG4gICAgbGV0IHRvdGFsU2hpcHMgPSB0aGlzLnNoaXBzLmxlbmd0aDtcclxuXHJcbiAgICB0aGlzLnNoaXBzLmZvckVhY2goKHNoaXApID0+IHtcclxuICAgICAgaWYgKHNoaXAuaGFzQmVlblN1bmsgPT09IHRydWUpIHtcclxuICAgICAgICBzaGlwc1N1bmsgKz0gMTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHNoaXBzU3VuayA9PT0gdG90YWxTaGlwcykge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBHYW1lYm9hcmQgZnJvbSBcIi4vR2FtZWJvYXJkLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5ZXIge1xyXG4gIGNvbnN0cnVjdG9yKG5hbWUgPSBcImNvbXB1dGVyXCIpIHtcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB0aGlzLmdhbWVib2FyZCA9IG5ldyBHYW1lYm9hcmQoKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGxheVBsYXllckJvYXJkKHBsYXllcikge1xyXG4gIGNvbnN0IHBsYXllckJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbGF5ZXIuYm9hcmRcIik7XHJcblxyXG4gIHBsYXllckJvYXJkLmlubmVySFRNTCA9IFwiXCI7XHJcblxyXG4gIHBsYXllci5nYW1lYm9hcmQuYm9hcmQuZm9yRWFjaCgocm93LCByb3dJbmRleCkgPT4ge1xyXG4gICAgcm93LmZvckVhY2goKGNvbHVtbiwgY29sdW1uSW5kZXgpID0+IHtcclxuICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImNlbGxcIik7XHJcbiAgICAgIGNlbGwuc3R5bGUuaGVpZ2h0ID0gXCI0MHB4XCI7XHJcbiAgICAgIGNlbGwuZGF0YXNldC5jb29yZGluYXRlcyA9IGAke3Jvd0luZGV4fSwke2NvbHVtbkluZGV4fWA7XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgY29sdW1uLmlzT2NjdXBpZWQgJiZcclxuICAgICAgICBwbGF5ZXIuZ2FtZWJvYXJkLnNoaXBzW2NvbHVtbi5vY2N1cGllcl0uaXNTdW5rKClcclxuICAgICAgKSB7XHJcbiAgICAgICAgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInllbGxvd1wiO1xyXG4gICAgICB9IGVsc2UgaWYgKGNvbHVtbi5pc09jY3VwaWVkICYmIGNvbHVtbi5pc0hpdCkge1xyXG4gICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJtaWRuaWdodEJsdWVcIjtcclxuICAgICAgICBjZWxsLnN0eWxlLmNvbG9yID0gXCJ5ZWxsb3dcIjtcclxuICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gXCJISVRcIjtcclxuICAgICAgfSBlbHNlIGlmICghY29sdW1uLmlzT2NjdXBpZWQgJiYgY29sdW1uLmlzSGl0KSB7XHJcbiAgICAgICAgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyYXlcIjtcclxuICAgICAgfSBlbHNlIGlmIChjb2x1bW4uaXNPY2N1cGllZCkge1xyXG4gICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJtaWRuaWdodEJsdWVcIjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcGxheWVyQm9hcmQuYXBwZW5kQ2hpbGQoY2VsbCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXNwbGF5Q29tcHV0ZXJCb2FyZChjb21wdXRlcikge1xyXG4gIGNvbnN0IGNvbXB1dGVyQm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbXB1dGVyLmJvYXJkXCIpO1xyXG5cclxuICBjb21wdXRlckJvYXJkLmlubmVySFRNTCA9IFwiXCI7XHJcblxyXG4gIGNvbXB1dGVyLmdhbWVib2FyZC5ib2FyZC5mb3JFYWNoKChyb3csIHJvd0luZGV4KSA9PiB7XHJcbiAgICByb3cuZm9yRWFjaCgoY29sdW1uLCBjb2x1bW5JbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiY2VsbFwiKTtcclxuICAgICAgY2VsbC5zdHlsZS5oZWlnaHQgPSBcIjQwcHhcIjtcclxuICAgICAgY2VsbC5kYXRhc2V0LmNvb3JkaW5hdGVzID0gYCR7cm93SW5kZXh9LCR7Y29sdW1uSW5kZXh9YDtcclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICBjb2x1bW4uaXNPY2N1cGllZCAmJlxyXG4gICAgICAgIGNvbXB1dGVyLmdhbWVib2FyZC5zaGlwc1tjb2x1bW4ub2NjdXBpZXJdLmlzU3VuaygpXHJcbiAgICAgICkge1xyXG4gICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ5ZWxsb3dcIjtcclxuICAgICAgfSBlbHNlIGlmIChjb2x1bW4uaXNPY2N1cGllZCAmJiBjb2x1bW4uaXNIaXQpIHtcclxuICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwibWlkbmlnaHRCbHVlXCI7XHJcbiAgICAgIH0gZWxzZSBpZiAoIWNvbHVtbi5pc09jY3VwaWVkICYmIGNvbHVtbi5pc0hpdCkge1xyXG4gICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmF5XCI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbXB1dGVyQm9hcmQuYXBwZW5kQ2hpbGQoY2VsbCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5BZGphY2VudChyb3csIGNvbHVtbiwgcGxheWVyKSB7XHJcbiAgY29uc3QgZmlyc3QgPSBbcm93IC0gMSwgY29sdW1uXTtcclxuICBjb25zdCBzZWNvbmQgPSBbcm93ICsgMSwgY29sdW1uXTtcclxuICBjb25zdCB0aGlyZCA9IFtyb3csIGNvbHVtbiAtIDFdO1xyXG4gIGNvbnN0IGZvdXJ0aCA9IFtyb3csIGNvbHVtbiArIDFdO1xyXG4gIGxldCBhZGphY2VudHMgPSBbXTtcclxuXHJcbiAgaWYgKCEoZmlyc3RbMF0gPCAwKSAmJiAhKGZpcnN0WzBdID4gOSkgJiYgIShmaXJzdFsxXSA8IDApICYmICEoZmlyc3RbMV0gPiA5KSlcclxuICAgIGFkamFjZW50cy5wdXNoKGZpcnN0LmpvaW4oXCIsXCIpKTtcclxuXHJcbiAgaWYgKFxyXG4gICAgIShzZWNvbmRbMF0gPCAwKSAmJlxyXG4gICAgIShzZWNvbmRbMF0gPiA5KSAmJlxyXG4gICAgIShzZWNvbmRbMV0gPCAwKSAmJlxyXG4gICAgIShzZWNvbmRbMV0gPiA5KVxyXG4gIClcclxuICAgIGFkamFjZW50cy5wdXNoKHNlY29uZC5qb2luKFwiLFwiKSk7XHJcblxyXG4gIGlmICghKHRoaXJkWzBdIDwgMCkgJiYgISh0aGlyZFswXSA+IDkpICYmICEodGhpcmRbMV0gPCAwKSAmJiAhKHRoaXJkWzFdID4gOSkpXHJcbiAgICBhZGphY2VudHMucHVzaCh0aGlyZC5qb2luKFwiLFwiKSk7XHJcblxyXG4gIGlmIChcclxuICAgICEoZm91cnRoWzBdIDwgMCkgJiZcclxuICAgICEoZm91cnRoWzBdID4gOSkgJiZcclxuICAgICEoZm91cnRoWzFdIDwgMCkgJiZcclxuICAgICEoZm91cnRoWzFdID4gOSlcclxuICApXHJcbiAgICBhZGphY2VudHMucHVzaChmb3VydGguam9pbihcIixcIikpO1xyXG5cclxuICBhZGphY2VudHMgPSBhZGphY2VudHMuZmlsdGVyKChhZGphY2VudCkgPT4ge1xyXG4gICAgcmV0dXJuICFwbGF5ZXIuZ2FtZWJvYXJkLmNlbGxzSGl0LmluY2x1ZGVzKGFkamFjZW50KTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGFkamFjZW50cztcclxufVxyXG4iLCJpbXBvcnQgZ2VuQWRqYWNlbnQgZnJvbSBcIi4vZ2VuQWRqYWNlbnQuanNcIjtcclxuXHJcbmxldCBhZGphY2VudHMgPSBbXTtcclxubGV0IGxhc3RPY2N1cGllZCA9IFtdO1xyXG5sZXQgYXhpcztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlQ29vcmRpbmF0ZShwbGF5ZXIpIHtcclxuICBpZiAoYWRqYWNlbnRzLmxlbmd0aCA+IDApIHtcclxuICAgIGlmIChsYXN0T2NjdXBpZWQubGVuZ3RoID49IDIpIHtcclxuICAgICAgY29uc29sZS5sb2cobGFzdE9jY3VwaWVkKTtcclxuICAgICAgbGV0IGZpcnN0ID0gbGFzdE9jY3VwaWVkWzBdOyAvLyBmb3JtYXQgaXMgJ2EsYidcclxuICAgICAgbGV0IHNlY29uZCA9IGxhc3RPY2N1cGllZFsxXTsgLy9mb3JtYXQgaXMgJ2MsZCdcclxuXHJcbiAgICAgIGZpcnN0ID0gZmlyc3Quc3BsaXQoXCIsXCIpOyAvL2Zvcm1hdCBpcyBbJ2EnLCAnYiddXHJcbiAgICAgIHNlY29uZCA9IHNlY29uZC5zcGxpdChcIixcIik7IC8vZm9ybWF0IGlzIFsnYScsICdiJ11cclxuXHJcbiAgICAgIGxldCByb3dPZkZpcnN0ID0gZmlyc3RbMF07IC8vZm9ybWF0IGlzICdhJ1xyXG4gICAgICBsZXQgcm93T2ZTZWNvbmQgPSBzZWNvbmRbMF07IC8vZm9ybWF0IGlzICdiJ1xyXG4gICAgICBsZXQgY29sT2ZGaXJzdCA9IGZpcnN0WzFdOyAvL2Zvcm1hdCBpcyAnYydcclxuICAgICAgbGV0IGNvbE9mU2Vjb25kID0gc2Vjb25kWzFdOyAvL2Zvcm1hdCBpcyAnZCdcclxuXHJcbiAgICAgIGlmIChyb3dPZkZpcnN0ID09PSByb3dPZlNlY29uZCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiSVRTIEhPUklaT05UQUxcIiwgcm93T2ZGaXJzdCwgcm93T2ZTZWNvbmQpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFkamFjZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgbGV0IGFkamFjZW50ID0gYWRqYWNlbnRzW2ldO1xyXG4gICAgICAgICAgYWRqYWNlbnQgPSBhZGphY2VudC5zcGxpdChcIixcIik7XHJcblxyXG4gICAgICAgICAgaWYgKGFkamFjZW50WzBdICE9PSByb3dPZkZpcnN0KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2VsZWN0aXZlIGF4aXMgaG9yaXpvbnRhbFwiKTtcclxuICAgICAgICAgICAgYWRqYWNlbnRzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChjb2xPZkZpcnN0ID09PSBjb2xPZlNlY29uZCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiSVRTIFZFUlRJQ0FMXCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGFkamFjZW50cywgXCJBREpBQ0VOVFMgQkVGT1JFIFNQTElDRVwiKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZGphY2VudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGxldCBhZGphY2VudCA9IGFkamFjZW50c1tpXTtcclxuICAgICAgICAgIGFkamFjZW50ID0gYWRqYWNlbnQuc3BsaXQoXCIsXCIpO1xyXG5cclxuICAgICAgICAgIGlmIChhZGphY2VudFsxXSAhPT0gY29sT2ZGaXJzdCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNlbGVjdGl2ZSBheGlzIHZlcnRpY2FsXCIpO1xyXG4gICAgICAgICAgICBhZGphY2VudHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhhZGphY2VudHMsIFwiQURKQUNFTlRTIEFGVEVSIFNQTElDRVwiKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vcGljayBmcm9tIGFkamFjZW50c1xyXG4gICAgY29uc3QgbGFzdEFkamFjZW50ID0gYWRqYWNlbnRzW2FkamFjZW50cy5sZW5ndGggLSAxXTtcclxuICAgIGNvbnN0IGxhc3RBZGphY2VudFNwbGl0ID0gbGFzdEFkamFjZW50LnNwbGl0KFwiLFwiKTtcclxuICAgIGNvbnN0IGxhc3RBZGphY2VudFNwbGl0Um93ID0gK2xhc3RBZGphY2VudFNwbGl0WzBdO1xyXG4gICAgY29uc3QgbGFzdEFkamFjZW50U3BsaXRDb2x1bW4gPSArbGFzdEFkamFjZW50U3BsaXRbMV07XHJcblxyXG4gICAgLy9wcmV0dGllci1pZ25vcmVcclxuICAgIGlmIChwbGF5ZXIuZ2FtZWJvYXJkLmJvYXJkW2xhc3RBZGphY2VudFNwbGl0Um93XVtsYXN0QWRqYWNlbnRTcGxpdENvbHVtbl0uaXNPY2N1cGllZCkge1xyXG4gICAgICAvL0hhbmRsZXMgY2FzZSB3aGVyZSBhZGphY2VudCBpdHNlbGYgaXMgb2NjdXBpZWQuIFRoZSBhZGphY2VudCdzIGFkamFjZW50cyB3aWxsIGFsc28gYmUgY29uY2F0ZW5hdGVkIGFmdGVyIGFkamFjZW50IGlzIHBvcHBlZFxyXG4gICAgICBjb25zdCB0YXJnZXR0ZWRTaGlwSWRlbnRpZmllciA9IHBsYXllci5nYW1lYm9hcmQuYm9hcmRbbGFzdEFkamFjZW50U3BsaXRSb3ddW2xhc3RBZGphY2VudFNwbGl0Q29sdW1uXS5vY2N1cGllcjtcclxuICAgICAgY29uc3Qgc2hpcEluQm9hcmQgPSBwbGF5ZXIuZ2FtZWJvYXJkLnNoaXBzW3RhcmdldHRlZFNoaXBJZGVudGlmaWVyXTtcclxuICAgICAgXHJcbiAgICAgIGxhc3RPY2N1cGllZC5wdXNoKGAke2xhc3RBZGphY2VudFNwbGl0Um93fSwke2xhc3RBZGphY2VudFNwbGl0Q29sdW1ufWApO1xyXG4gICAgICBsZXQgYWRkaXRpb25hbEFkamFjZW50ID0gZ2VuQWRqYWNlbnQobGFzdEFkamFjZW50U3BsaXRSb3csIGxhc3RBZGphY2VudFNwbGl0Q29sdW1uLCBwbGF5ZXIpO1xyXG4gICAgICBhZGphY2VudHMucG9wKCk7XHJcbiAgICAgIGFkamFjZW50cyA9IGFkamFjZW50cy5jb25jYXQoYWRkaXRpb25hbEFkamFjZW50KTtcclxuICBcclxuICAgICAgLy9Jc1N1bmsgd29uJ3Qgd29yayAoZHVlIHRvIHJldHVybiBiZWluZyBsYXRlcikgc28gY2FtZSB1cCB3aXRoIHRoaXMgd2F5LiBUaGUgZ29hbCBpcyB0byBwcmV2ZW50IGhpdHRpbmcgYWRqYWNlbnQgY2VsbHMgb2YgYWxyZWFkeSBzdW5rIHNoaXAuXHJcbiAgICAgIGlmIChzaGlwSW5Cb2FyZC5sZW5ndGggLSBzaGlwSW5Cb2FyZC50aW1lc0hpdCA9PT0gMSkge1xyXG4gICAgICAgIGFkamFjZW50cyA9IFtdO1xyXG4gICAgICAgIGxhc3RPY2N1cGllZCA9IFtdO1xyXG4gICAgICAgIGF4aXMgPSB1bmRlZmluZWQ7XHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnNvbGUubG9nKGFkamFjZW50cyk7XHJcbiAgICAgIHJldHVybiBsYXN0QWRqYWNlbnQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvL0hhbmRsZXMgY2FzZSB3aGVyZSBhZGphY2VudCBpcyBub3Qgb2NjdXBpZWQuIFRoZSBhZGphY2VudCBpcyBzaW1wbHkgcG9wcGVkIG9mZlxyXG4gICAgICBhZGphY2VudHMucG9wKCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGFkamFjZW50cyk7XHJcbiAgICAgIHJldHVybiBsYXN0QWRqYWNlbnQ7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vR2VuZXJhdGUgcmFuZG9tbHkgYW5kIGRvIG5vdCBwaWNrIGZyb20gYWRqYWNlbnRzXHJcbiAgICBsZXQgcm93O1xyXG4gICAgbGV0IGNvbHVtbjtcclxuICAgIGxldCByZXN1bHQ7XHJcblxyXG4gICAgd2hpbGUgKCFyZXN1bHQgfHwgcGxheWVyLmdhbWVib2FyZC5jZWxsc0hpdC5pbmNsdWRlcyhyZXN1bHQpKSB7XHJcbiAgICAgIHJvdyA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDkpO1xyXG4gICAgICBjb2x1bW4gPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA5KTtcclxuXHJcbiAgICAgIHJlc3VsdCA9IGAke3Jvd30sJHtjb2x1bW59YDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGxheWVyLmdhbWVib2FyZC5ib2FyZFtyb3ddW2NvbHVtbl0uaXNPY2N1cGllZCkge1xyXG4gICAgICBsYXN0T2NjdXBpZWQucHVzaChgJHtyb3d9LCR7Y29sdW1ufWApO1xyXG4gICAgICAvL0NoZWNrcyBpZiBjb29yZGluYXRlcyByYW5kb21seSBnZW5lcmF0ZWQgaXMgb2NjdXBpZWQuIElmIGl0IGlzLCB0aGVuIGl0cyBhZGphY2VudHMgYXJlIGNvbmNhdGVuYXRlZCB0byBhZGphY2VudHMgYXJyYXlcclxuICAgICAgbGV0IGFkZGl0aW9uYWxBZGphY2VudCA9IGdlbkFkamFjZW50KHJvdywgY29sdW1uLCBwbGF5ZXIpO1xyXG5cclxuICAgICAgYWRqYWNlbnRzID0gYWRqYWNlbnRzLmNvbmNhdChhZGRpdGlvbmFsQWRqYWNlbnQpO1xyXG4gICAgICBjb25zb2xlLmxvZyhhZGphY2VudHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlYTkyMzJlMWE0ZTBlNjQ1ZWY0ZGYwYjNhMjIxMDIyMC5tcDNcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYmEzMjBkNWIwYjU0NjU4ZTk0M2QxNmY1NDc2YWNjYzIubXAzXCI7IiwiaW1wb3J0IHZpY3RvcnkgZnJvbSBcIi4uL3NvdW5kcy92aWN0b3J5Lm1wM1wiO1xyXG5pbXBvcnQgZGVmZWF0IGZyb20gXCIuLi9zb3VuZHMvZGVmZWF0Lm1wM1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZW5kR2FtZShwbGF5ZXIpIHtcclxuICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XHJcblxyXG4gIGNvbnN0IHZpY3RvcnlTb3VuZCA9IG5ldyBBdWRpbyh2aWN0b3J5KTtcclxuICBjb25zdCBkZWZlYXRTb3VuZCA9IG5ldyBBdWRpbyhkZWZlYXQpO1xyXG5cclxuICBpZiAocGxheWVyLm5hbWUgIT09IFwiY29tcHV0ZXJcIikge1xyXG4gICAgdmljdG9yeVNvdW5kLnBsYXkoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZGVmZWF0U291bmQucGxheSgpO1xyXG4gIH1cclxuXHJcbiAgYm9keS5pbm5lckhUTUwgPSBgPGgxPiR7cGxheWVyLm5hbWVbMF0udG9VcHBlckNhc2UoKSArIHBsYXllci5uYW1lLnNsaWNlKDEpfSB3b24hPC9oMT5gO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkYWVhZWRhNTZiOTc4OTFkM2JjMWVlYjcwMGQ4YWYyYy5tcDNcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGVkMzI4ODgxMmRkYzdiNzg5NTY4ZGZlMTY5NGIyZmEubXAzXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjI3ZTM4NjY5MWRiM2FkZjIzZDVkYjg1MjlmZjIxMTQ5Lm1wM1wiOyIsImltcG9ydCBkaXNwbGF5Q29tcHV0ZXJCb2FyZCBmcm9tIFwiLi9kaXNwbGF5Q29tcHV0ZXJCb2FyZC5qc1wiO1xyXG5pbXBvcnQgZGlzcGxheVBsYXllckJvYXJkIGZyb20gXCIuL2Rpc3BsYXlQbGF5ZXJCb2FyZC5qc1wiO1xyXG5pbXBvcnQgZ2VuZXJhdGVDb29yZGluYXRlIGZyb20gXCIuLi91dGlsL2dlbmVyYXRlQ29vcmRpbmF0ZS5qc1wiO1xyXG5pbXBvcnQgZW5kR2FtZSBmcm9tIFwiLi9lbmRHYW1lLmpzXCI7XHJcbmltcG9ydCBjYW5ub25GaXJlIGZyb20gXCIuLi9zb3VuZHMvY2Fubm9uRmlyZS5tcDNcIjtcclxuaW1wb3J0IHdhdGVyU3BsYXNoIGZyb20gXCIuLi9zb3VuZHMvd2F0ZXJTcGxhc2gubXAzXCI7XHJcbmltcG9ydCBleHBsb3Npb24gZnJvbSBcIi4uL3NvdW5kcy9leHBsb3Npb24ubXAzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwbGF5KHBsYXllciwgY29tcHV0ZXIpIHtcclxuICBsZXQgdHVybiA9IFwicGxheWVyXCI7XHJcblxyXG4gIGNvbnN0IGNvbXB1dGVyQm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJvYXJkLmNvbXB1dGVyXCIpO1xyXG5cclxuICBmdW5jdGlvbiBhdHRhY2tQbGF5ZXIoKSB7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgaWYgKHR1cm4gPT09IFwiY29tcHV0ZXJcIikge1xyXG4gICAgICAgIGNvbnN0IGNhbm5vbkZpcmVTb3VuZCA9IG5ldyBBdWRpbyhjYW5ub25GaXJlKTtcclxuICAgICAgICBjYW5ub25GaXJlU291bmQucGxheSgpO1xyXG4gICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gZ2VuZXJhdGVDb29yZGluYXRlKHBsYXllcik7XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3Qgc3BsaXRDb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgIHBsYXllci5nYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhjb29yZGluYXRlcyk7XHJcblxyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBwbGF5ZXIuZ2FtZWJvYXJkLmJvYXJkW3NwbGl0Q29vcmRpbmF0ZXNbMF1dW3NwbGl0Q29vcmRpbmF0ZXNbMV1dXHJcbiAgICAgICAgICAgICAgLmlzT2NjdXBpZWRcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICBjb25zdCBleHBsb3Npb25Tb3VuZCA9IG5ldyBBdWRpbyhleHBsb3Npb24pO1xyXG4gICAgICAgICAgICBleHBsb3Npb25Tb3VuZC5wbGF5KCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB3YXRlclNwbGFzaFNvdW5kID0gbmV3IEF1ZGlvKHdhdGVyU3BsYXNoKTtcclxuICAgICAgICAgICAgd2F0ZXJTcGxhc2hTb3VuZC5wbGF5KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkaXNwbGF5UGxheWVyQm9hcmQocGxheWVyKTtcclxuXHJcbiAgICAgICAgICBpZiAocGxheWVyLmdhbWVib2FyZC5jaGVja0FsbFN1bmsoKSkge1xyXG4gICAgICAgICAgICBlbmRHYW1lKGNvbXB1dGVyKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHR1cm4gPSBcInBsYXllclwiO1xyXG4gICAgICAgICAgY29tcHV0ZXJCb2FyZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXR0YWNrQ29tcHV0ZXJFdmVudCk7XHJcbiAgICAgICAgfSwgMzAwMCk7XHJcbiAgICAgIH1cclxuICAgIH0sIDMwMDApO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXR0YWNrQ29tcHV0ZXJFdmVudChlKSB7XHJcbiAgICBpZiAodHVybiA9PT0gXCJwbGF5ZXJcIikge1xyXG4gICAgICBjb25zdCBjYW5ub25GaXJlU291bmQgPSBuZXcgQXVkaW8oY2Fubm9uRmlyZSk7XHJcbiAgICAgIGNvbXB1dGVyQm9hcmQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGF0dGFja0NvbXB1dGVyRXZlbnQpO1xyXG4gICAgICBjYW5ub25GaXJlU291bmQucGxheSgpO1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBjb25zdCBjb29yZGluYXRlcyA9IGUudGFyZ2V0LmRhdGFzZXQuY29vcmRpbmF0ZXM7XHJcbiAgICAgICAgY29uc3Qgc3BsaXRDb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBpZiAoY29tcHV0ZXIuZ2FtZWJvYXJkLmNlbGxzSGl0LmluY2x1ZGVzKGNvb3JkaW5hdGVzKSkgcmV0dXJuO1xyXG4gICAgICAgIGNvbXB1dGVyLmdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGVzKTtcclxuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgY29tcHV0ZXIuZ2FtZWJvYXJkLmJvYXJkW3NwbGl0Q29vcmRpbmF0ZXNbMF1dW3NwbGl0Q29vcmRpbmF0ZXNbMV1dXHJcbiAgICAgICAgICAgIC5pc09jY3VwaWVkXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBjb25zdCBleHBsb3Npb25Tb3VuZCA9IG5ldyBBdWRpbyhleHBsb3Npb24pO1xyXG4gICAgICAgICAgZXhwbG9zaW9uU291bmQucGxheSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCB3YXRlclNwbGFzaFNvdW5kID0gbmV3IEF1ZGlvKHdhdGVyU3BsYXNoKTtcclxuICAgICAgICAgIHdhdGVyU3BsYXNoU291bmQucGxheSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGlzcGxheUNvbXB1dGVyQm9hcmQoY29tcHV0ZXIpO1xyXG5cclxuICAgICAgICBpZiAoY29tcHV0ZXIuZ2FtZWJvYXJkLmNoZWNrQWxsU3VuaygpKSB7XHJcbiAgICAgICAgICBlbmRHYW1lKHBsYXllcik7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0dXJuID0gXCJjb21wdXRlclwiO1xyXG4gICAgICAgIC8vIGNvbXB1dGVyQm9hcmQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGF0dGFja0NvbXB1dGVyRXZlbnQpO1xyXG4gICAgICAgIGF0dGFja1BsYXllcigpO1xyXG4gICAgICB9LCAyMDAwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbXB1dGVyQm9hcmQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGF0dGFja0NvbXB1dGVyRXZlbnQpO1xyXG59XHJcbiIsImltcG9ydCBQbGF5ZXIgZnJvbSBcIi4uL2NsYXNzZXMvUGxheWVyLmpzXCI7XHJcbmltcG9ydCBwbGFjZUNvbXB1dGVyU2hpcHMgZnJvbSBcIi4vcGxhY2VDb21wdXRlclNoaXBzLmpzXCI7XHJcbmltcG9ydCBkaXNwbGF5UGxheWVyQm9hcmQgZnJvbSBcIi4uL2RvbS9kaXNwbGF5UGxheWVyQm9hcmQuanNcIjtcclxuaW1wb3J0IGRpc3BsYXlDb21wdXRlckJvYXJkIGZyb20gXCIuLi9kb20vZGlzcGxheUNvbXB1dGVyQm9hcmQuanNcIjtcclxuaW1wb3J0IHBsYXkgZnJvbSBcIi4uL2RvbS9wbGF5LmpzXCI7XHJcbmltcG9ydCBcIi4uL3N0eWxlcy9nYW1lLmNzc1wiO1xyXG5cclxuY29uc3QgcGxheWVyID0gbmV3IFBsYXllcihcInBsYXllclwiKTtcclxuY29uc3QgY29tcHV0ZXIgPSBuZXcgUGxheWVyKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydEdhbWUob2JqKSB7XHJcbiAgb2JqLmZvckVhY2goKG8pID0+IHtcclxuICAgIHBsYXllci5nYW1lYm9hcmQucGxhY2VTaGlwKG8ubGVuZ3RoLCBvLnN0YXJ0aW5nQ29vcmRpbmF0ZSwgby5heGlzKTtcclxuICB9KTtcclxuXHJcbiAgcGxhY2VDb21wdXRlclNoaXBzKGNvbXB1dGVyKTtcclxuICBkaXNwbGF5UGxheWVyQm9hcmQocGxheWVyKTtcclxuICBkaXNwbGF5Q29tcHV0ZXJCb2FyZChjb21wdXRlcik7XHJcbiAgcGxheShwbGF5ZXIsIGNvbXB1dGVyKTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTaGlwUGxhY2VOYW1lKG9iaikge1xyXG4gIGlmICghb2JqLmxlbmd0aCkgcmV0dXJuO1xyXG4gIGNvbnN0IGRpYWxvZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaWFsb2dcIik7XHJcbiAgY29uc3Qgc3BhbiA9IGRpYWxvZy5xdWVyeVNlbGVjdG9yKFwiI3NoaXBOYW1lXCIpO1xyXG5cclxuICBzcGFuLnN0eWxlLnRleHREZWNvcmF0aW9uID0gXCJ1bmRlcmxpbmVcIjtcclxuICBzcGFuLnRleHRDb250ZW50ID0gb2JqWzBdLm5hbWU7XHJcbn1cclxuIiwiaW1wb3J0IFwiLi4vc3R5bGVzL21vZGFsLmNzc1wiO1xyXG5pbXBvcnQgc3RhcnRHYW1lIGZyb20gXCIuLi91dGlsL3N0YXJ0R2FtZS5qc1wiO1xyXG5pbXBvcnQgdXBkYXRlU2hpcFBsYWNlTmFtZSBmcm9tIFwiLi4vdXRpbC91cGRhdGVTaGlwTmFtZS5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGxhY2VQbGF5ZXJTaGlwcygpIHtcclxuICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XHJcblxyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoZSkgPT4ge1xyXG4gICAgY29uc3QgZGlhbG9nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpYWxvZ1wiKTtcclxuXHJcbiAgICBkaWFsb2cuaW5uZXJIVE1MID0gYDxidXR0b24+Q2hhbmdlIHRvIHZlcnRpY2FsPC9idXR0b24+PGRpdj5cclxuICAgICAgICA8aDM+UGxheWVyPC9oMz5cclxuICAgICAgICA8aDM+UGxlYXNlIHBsYWNlIHlvdXIgPHNwYW4gaWQ9XCJzaGlwTmFtZVwiPjwvc3Bhbj48L2gzPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwbGFjZVNoaXAgYm9hcmRcIj48L2Rpdj5cclxuICAgICAgPC9kaXY+YDtcclxuXHJcbiAgICBib2R5LnByZXBlbmQoZGlhbG9nKTtcclxuXHJcbiAgICBsZXQgYXhpcyA9IFwiaG9yaXpvbnRhbFwiO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGF4aXMpO1xyXG5cclxuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaWFsb2cgYnV0dG9uXCIpO1xyXG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICBpZiAoYXhpcyA9PT0gXCJob3Jpem9udGFsXCIpIHtcclxuICAgICAgICBidXR0b24udGV4dENvbnRlbnQgPSBcIkNoYW5nZSB0byBob3Jpem9udGFsXCI7XHJcbiAgICAgICAgYXhpcyA9IFwidmVydGljYWxcIjtcclxuICAgICAgfSBlbHNlIGlmIChheGlzID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgICBidXR0b24udGV4dENvbnRlbnQgPSBcIkNoYW5nZSB0byB2ZXJ0aWNhbFwiO1xyXG4gICAgICAgIGF4aXMgPSBcImhvcml6b250YWxcIjtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcGxhY2VTaGlwQm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBsYWNlU2hpcC5ib2FyZFwiKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaisrKSB7XHJcbiAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiY2VsbFwiKTtcclxuICAgICAgICBjZWxsLmRhdGFzZXQuY29vcmRpbmF0ZXMgPSBgJHtpfSwke2p9YDtcclxuXHJcbiAgICAgICAgcGxhY2VTaGlwQm9hcmQuYXBwZW5kQ2hpbGQoY2VsbCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucGxhY2VTaGlwLmJvYXJkIC5jZWxsXCIpO1xyXG5cclxuICAgIC8vIGNvbnN0IHNoaXBMZW5ndGhzID0gWzUsIDQsIDMsIDMsIDJdO1xyXG5cclxuICAgIGNvbnN0IHNoaXBMZW5ndGhzID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogXCJDYXJyaWVyXCIsXHJcbiAgICAgICAgbGVuZ3RoOiA1LFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogXCJCYXR0bGVzaGlwXCIsXHJcbiAgICAgICAgbGVuZ3RoOiA0LFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogXCJDcnVpc2VyXCIsXHJcbiAgICAgICAgbGVuZ3RoOiAzLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogXCJTdWJtYXJpbmVcIixcclxuICAgICAgICBsZW5ndGg6IDMsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiBcIkRlc3Ryb3llclwiLFxyXG4gICAgICAgIGxlbmd0aDogMixcclxuICAgICAgfSxcclxuICAgIF07XHJcblxyXG4gICAgdXBkYXRlU2hpcFBsYWNlTmFtZShzaGlwTGVuZ3Rocyk7XHJcbiAgICBjb25zdCBvYmplY3RzID0gW107XHJcblxyXG4gICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xyXG4gICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5leHRDb29yZGluYXRlcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHNwbGl0ID0gY2VsbC5kYXRhc2V0LmNvb3JkaW5hdGVzLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBjb25zdCByb3cgPSBOdW1iZXIoc3BsaXRbMF0pO1xyXG4gICAgICAgIGNvbnN0IGNvbHVtbiA9IE51bWJlcihzcGxpdFsxXSk7XHJcblxyXG4gICAgICAgIGlmIChheGlzID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IGNvbHVtbjsgaSA8IGNvbHVtbiArIHNoaXBMZW5ndGhzWzBdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpID4gOSkgYnJlYWs7XHJcbiAgICAgICAgICAgIG5leHRDb29yZGluYXRlcy5wdXNoKGAke3Jvd30sJHtpfWApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gcm93OyBpIDwgcm93ICsgc2hpcExlbmd0aHNbMF0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPiA5KSBicmVhaztcclxuICAgICAgICAgICAgbmV4dENvb3JkaW5hdGVzLnB1c2goYCR7aX0sJHtjb2x1bW59YCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuZXh0Q29vcmRpbmF0ZXMuZm9yRWFjaCgoY29vcmRpbmF0ZXMpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHRoZUNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICBgW2RhdGEtY29vcmRpbmF0ZXM9XCIke2Nvb3JkaW5hdGVzfVwiXWAsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgdGhlQ2VsbC5jbGFzc0xpc3QuYWRkKFwiZ3JlZW5Db2xvclwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLCAoZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5leHRDb29yZGluYXRlcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHNwbGl0ID0gY2VsbC5kYXRhc2V0LmNvb3JkaW5hdGVzLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBjb25zdCByb3cgPSBOdW1iZXIoc3BsaXRbMF0pO1xyXG4gICAgICAgIGNvbnN0IGNvbHVtbiA9IE51bWJlcihzcGxpdFsxXSk7XHJcblxyXG4gICAgICAgIGlmIChheGlzID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IGNvbHVtbjsgaSA8IGNvbHVtbiArIHNoaXBMZW5ndGhzWzBdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpID4gOSkgYnJlYWs7XHJcbiAgICAgICAgICAgIG5leHRDb29yZGluYXRlcy5wdXNoKGAke3Jvd30sJHtpfWApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gcm93OyBpIDwgcm93ICsgc2hpcExlbmd0aHNbMF0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPiA5KSBicmVhaztcclxuICAgICAgICAgICAgbmV4dENvb3JkaW5hdGVzLnB1c2goYCR7aX0sJHtjb2x1bW59YCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuZXh0Q29vcmRpbmF0ZXMuZm9yRWFjaCgoY29vcmRpbmF0ZXMpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHRoZUNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICBgW2RhdGEtY29vcmRpbmF0ZXM9XCIke2Nvb3JkaW5hdGVzfVwiXWAsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgdGhlQ2VsbC5jbGFzc0xpc3QucmVtb3ZlKFwiZ3JlZW5Db2xvclwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5leHRDb29yZGluYXRlcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHNwbGl0ID0gY2VsbC5kYXRhc2V0LmNvb3JkaW5hdGVzLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBjb25zdCByb3cgPSBOdW1iZXIoc3BsaXRbMF0pO1xyXG4gICAgICAgIGNvbnN0IGNvbHVtbiA9IE51bWJlcihzcGxpdFsxXSk7XHJcblxyXG4gICAgICAgIGlmIChheGlzID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IGNvbHVtbjsgaSA8IGNvbHVtbiArIHNoaXBMZW5ndGhzWzBdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpID4gOSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBuZXh0Q29vcmRpbmF0ZXMucHVzaChgJHtyb3d9LCR7aX1gKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGF4aXMgPT09IFwidmVydGljYWxcIikge1xyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IHJvdzsgaSA8IHJvdyArIHNoaXBMZW5ndGhzWzBdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpID4gOSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBuZXh0Q29vcmRpbmF0ZXMucHVzaChgJHtpfSwke2NvbHVtbn1gKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjYW5CZVBsYWNlZCA9IHRydWU7XHJcbiAgICAgICAgbmV4dENvb3JkaW5hdGVzLmZvckVhY2goKGNvb3JkaW5hdGVzKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB0aGVDZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICAgYFtkYXRhLWNvb3JkaW5hdGVzPVwiJHtjb29yZGluYXRlc31cIl1gLFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGlmICh0aGVDZWxsLmNsYXNzTGlzdC5jb250YWlucyhcImRlZmluaXRlbHlQbGFjZWRcIikpXHJcbiAgICAgICAgICAgIGNhbkJlUGxhY2VkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICghY2FuQmVQbGFjZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgbmV4dENvb3JkaW5hdGVzLmZvckVhY2goKGNvb3JkaW5hdGVzKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB0aGVDZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICAgYFtkYXRhLWNvb3JkaW5hdGVzPVwiJHtjb29yZGluYXRlc31cIl1gLFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHRoZUNlbGwuY2xhc3NMaXN0LmFkZChcImRlZmluaXRlbHlQbGFjZWRcIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IG9iaiA9IHtcclxuICAgICAgICAgIGxlbmd0aDogc2hpcExlbmd0aHNbMF0ubGVuZ3RoLFxyXG4gICAgICAgICAgc3RhcnRpbmdDb29yZGluYXRlOiBjZWxsLmRhdGFzZXQuY29vcmRpbmF0ZXMsXHJcbiAgICAgICAgICBheGlzOiBheGlzLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIG9iamVjdHMucHVzaChvYmopO1xyXG5cclxuICAgICAgICBzaGlwTGVuZ3Rocy5zaGlmdCgpO1xyXG4gICAgICAgIHVwZGF0ZVNoaXBQbGFjZU5hbWUoc2hpcExlbmd0aHMpO1xyXG5cclxuICAgICAgICBpZiAoc2hpcExlbmd0aHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICBkaWFsb2cuY2xvc2UoKTtcclxuICAgICAgICAgIGRpYWxvZy5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICBzdGFydEdhbWUob2JqZWN0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRpYWxvZy5zaG93TW9kYWwoKTtcclxuICB9KTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwbGFjZUNvbXB1dGVyU2hpcHMoY29tcHV0ZXIpIHtcclxuICBjb25zdCBzaGlwTGVuZ3RocyA9IFs1LCA0LCAzLCAzLCAyXTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwTGVuZ3Rocy5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgdHJ1ZUZhbHNlID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKSA/IFwidmVydGljYWxcIiA6IFwiaG9yaXpvbnRhbFwiO1xyXG5cclxuICAgIGNvbnN0IHJvdyA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDkpO1xyXG4gICAgY29uc3QgY29sdW1uID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogOSk7XHJcbiAgICBjb25zdCBjb29yZGluYXRlcyA9IGAke3Jvd30sJHtjb2x1bW59YDtcclxuXHJcbiAgICBjb21wdXRlci5nYW1lYm9hcmQucGxhY2VTaGlwKHNoaXBMZW5ndGhzW2ldLCBjb29yZGluYXRlcywgdHJ1ZUZhbHNlKTtcclxuXHJcbiAgICBpZiAoY29tcHV0ZXIuZ2FtZWJvYXJkLnNoaXBzLmxlbmd0aCAhPT0gaSArIDEpIHtcclxuICAgICAgaS0tOyAvL0lmIHNoaXAgd2FzIE5PVCBwbGFjZWQgdGhlbiB0aGUgY3VycmVudCBpbnN0YW5jZSBvZiBsb29wIHdpbGwga2VlcCByZS1ydW5uaW5nIHVudGlsIHNoaXAgaXMgcGxhY2VkXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zb2xlLmxvZyhjb21wdXRlci5nYW1lYm9hcmQuc2hpcHMubGVuZ3RoKTtcclxufVxyXG4iLCJpbXBvcnQgXCIuL3N0eWxlcy9nYW1lLmNzc1wiO1xyXG5pbXBvcnQgcGxhY2VQbGF5ZXJTaGlwcyBmcm9tIFwiLi9kb20vcGxhY2VQbGF5ZXJTaGlwcy5qc1wiO1xyXG5cclxucGxhY2VQbGF5ZXJTaGlwcygpO1xyXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGVzdCIsInJlcGxhY2UiLCJwIiwibmMiLCJsb2NhbHMiLCJTaGlwIiwiY29uc3RydWN0b3IiLCJzdGFydGluZ0Nvb3JkaW5hdGUiLCJ0aW1lc0hpdCIsImhhc0JlZW5TdW5rIiwiaGl0IiwiaXNTdW5rIiwiR2FtZWJvYXJkIiwiYm9hcmQiLCJqIiwiY29vcmRpbmF0ZXMiLCJpc09jY3VwaWVkIiwiaXNIaXQiLCJvY2N1cGllciIsImNyZWF0ZUJvYXJkIiwic2hpcHMiLCJjZWxsc0hpdCIsInJvdyIsInN0YXJ0aW5nQ29sdW1uIiwiYXJndW1lbnRzIiwic2hpcCIsInNwbGl0Iiwic3RhcnRpbmdSb3ciLCJjb2x1bW4iLCJwbGFjZVNoaXAiLCJheGlzIiwidXBkYXRlQ2VsbHNIaXQiLCJyZWNlaXZlQXR0YWNrIiwiaW5kZXhPZk9jY3VwaWVyIiwiZmluZEluZGV4IiwiY2hlY2tBbGxTdW5rIiwic2hpcHNTdW5rIiwidG90YWxTaGlwcyIsImZvckVhY2giLCJQbGF5ZXIiLCJuYW1lIiwiZ2FtZWJvYXJkIiwiZGlzcGxheVBsYXllckJvYXJkIiwicGxheWVyIiwicGxheWVyQm9hcmQiLCJpbm5lckhUTUwiLCJyb3dJbmRleCIsImNvbHVtbkluZGV4IiwiY2VsbCIsImNsYXNzTGlzdCIsImFkZCIsImhlaWdodCIsImRhdGFzZXQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvciIsInRleHRDb250ZW50IiwiZGlzcGxheUNvbXB1dGVyQm9hcmQiLCJjb21wdXRlciIsImNvbXB1dGVyQm9hcmQiLCJnZW5BZGphY2VudCIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJmb3VydGgiLCJhZGphY2VudHMiLCJmaWx0ZXIiLCJhZGphY2VudCIsImluY2x1ZGVzIiwibGFzdE9jY3VwaWVkIiwiZW5kR2FtZSIsImJvZHkiLCJ2aWN0b3J5U291bmQiLCJBdWRpbyIsInZpY3RvcnkiLCJkZWZlYXRTb3VuZCIsImRlZmVhdCIsInBsYXkiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwidHVybiIsImF0dGFja0NvbXB1dGVyRXZlbnQiLCJjYW5ub25GaXJlU291bmQiLCJjYW5ub25GaXJlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJzcGxpdENvb3JkaW5hdGVzIiwiZXhwbG9zaW9uIiwid2F0ZXJTcGxhc2giLCJjb25zb2xlIiwibG9nIiwicm93T2ZGaXJzdCIsInJvd09mU2Vjb25kIiwiY29sT2ZGaXJzdCIsImNvbE9mU2Vjb25kIiwibGFzdEFkamFjZW50IiwibGFzdEFkamFjZW50U3BsaXQiLCJsYXN0QWRqYWNlbnRTcGxpdFJvdyIsImxhc3RBZGphY2VudFNwbGl0Q29sdW1uIiwidGFyZ2V0dGVkU2hpcElkZW50aWZpZXIiLCJzaGlwSW5Cb2FyZCIsImFkZGl0aW9uYWxBZGphY2VudCIsInBvcCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImdlbmVyYXRlQ29vcmRpbmF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVTaGlwUGxhY2VOYW1lIiwic3BhbiIsInRleHREZWNvcmF0aW9uIiwiZGlhbG9nIiwicHJlcGVuZCIsImJ1dHRvbiIsInBsYWNlU2hpcEJvYXJkIiwiY2VsbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2hpcExlbmd0aHMiLCJvYmplY3RzIiwibmV4dENvb3JkaW5hdGVzIiwiTnVtYmVyIiwiY2FuQmVQbGFjZWQiLCJjb250YWlucyIsInNoaWZ0IiwiY2xvc2UiLCJ0cnVlRmFsc2UiLCJwbGFjZUNvbXB1dGVyU2hpcHMiLCJzdGFydEdhbWUiLCJzaG93TW9kYWwiLCJwbGFjZVBsYXllclNoaXBzIl0sInNvdXJjZVJvb3QiOiIifQ==