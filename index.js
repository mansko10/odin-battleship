(()=>{"use strict";var e={992:(e,n,r)=>{r.d(n,{A:()=>s});var t=r(354),o=r.n(t),i=r(314),a=r.n(i)()(o());a.push([e.id,".game * {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.game h1 {\n  text-align: center;\n  margin: 2rem;\n}\n\n.game .boards h3 {\n  text-align: center;\n  margin: 1rem;\n  user-select: none;\n}\n\n.game .boards {\n  display: flex;\n  justify-content: center;\n  column-gap: 50px;\n}\n\n.game .board {\n  box-sizing: content-box;\n  display: flex;\n  flex-wrap: wrap;\n  width: 400px;\n  height: 400px;\n}\n\n.game .player.board,\n.computer.board {\n  flex: 0 1 400px;\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n}\n\n.game .cell {\n  flex: 0 0 40px;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.computer.board .cell:hover {\n  border: 1px solid darkorange;\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./src/styles/game.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;;EAEE,eAAe;EACf,2BAA2B;EAC3B,4BAA4B;AAC9B;;AAEA;EACE,cAAc;EACd,6BAA6B;EAC7B,8BAA8B;;EAE9B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,4BAA4B;EAC5B,eAAe;AACjB",sourcesContent:[".game * {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.game h1 {\r\n  text-align: center;\r\n  margin: 2rem;\r\n}\r\n\r\n.game .boards h3 {\r\n  text-align: center;\r\n  margin: 1rem;\r\n  user-select: none;\r\n}\r\n\r\n.game .boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  column-gap: 50px;\r\n}\r\n\r\n.game .board {\r\n  box-sizing: content-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.game .player.board,\r\n.computer.board {\r\n  flex: 0 1 400px;\r\n  border-top: 1px solid black;\r\n  border-left: 1px solid black;\r\n}\r\n\r\n.game .cell {\r\n  flex: 0 0 40px;\r\n  border-right: 1px solid black;\r\n  border-bottom: 1px solid black;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.computer.board .cell:hover {\r\n  border: 1px solid darkorange;\r\n  cursor: pointer;\r\n}\r\n"],sourceRoot:""}]);const s=a},849:(e,n,r)=>{r.d(n,{A:()=>s});var t=r(354),o=r.n(t),i=r(314),a=r.n(i)()(o());a.push([e.id,"* {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.choice {\n  border: 1px solid black;\n  padding: 10px;\n  margin: 30px 0;\n  cursor: pointer;\n}\n\n.choice:hover {\n  background-color: lightgray;\n}\n","",{version:3,sources:["webpack://./src/styles/gameTypeModal.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,2BAA2B;AAC7B",sourcesContent:["* {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.choice {\r\n  border: 1px solid black;\r\n  padding: 10px;\r\n  margin: 30px 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.choice:hover {\r\n  background-color: lightgray;\r\n}\r\n"],sourceRoot:""}]);const s=a},592:(e,n,r)=>{r.d(n,{A:()=>s});var t=r(354),o=r.n(t),i=r(314),a=r.n(i)()(o());a.push([e.id,"* {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nh1 {\n  text-align: center;\n  margin: 2rem;\n}\n\n.boards h3 {\n  text-align: center;\n  margin: 1rem;\n  user-select: none;\n}\n\n.boards {\n  display: flex;\n  justify-content: center;\n  column-gap: 50px;\n}\n\n.board {\n  box-sizing: content-box;\n  display: flex;\n  flex-wrap: wrap;\n  width: 400px;\n  height: 400px;\n}\n\n.player.board,\n.computer.board,\n.placeShip.board {\n  flex: 0 1 400px;\n  /* border: 1px solid black; */\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n\n  user-select: none;\n}\n\ndialog {\n  text-align: center;\n  background-color: ghostwhite;\n  margin: auto;\n  border: none;\n  outline: none;\n  padding: 50px;\n}\n\n.cell {\n  flex: 0 0 40px;\n  border-right: 1px solid black;\n  border-bottom: 1px solid black;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.greenColor {\n  background-color: green;\n}\n\n.definitelyPlaced {\n  background-color: darkgreen;\n}\n","",{version:3,sources:["webpack://./src/styles/placeShipModal.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,aAAa;AACf;;AAEA;;;EAGE,eAAe;EACf,6BAA6B;EAC7B,2BAA2B;EAC3B,4BAA4B;;EAE5B,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,4BAA4B;EAC5B,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,aAAa;AACf;;AAEA;EACE,cAAc;EACd,6BAA6B;EAC7B,8BAA8B;;EAE9B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,2BAA2B;AAC7B",sourcesContent:["* {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  margin: 2rem;\r\n}\r\n\r\n.boards h3 {\r\n  text-align: center;\r\n  margin: 1rem;\r\n  user-select: none;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  column-gap: 50px;\r\n}\r\n\r\n.board {\r\n  box-sizing: content-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.player.board,\r\n.computer.board,\r\n.placeShip.board {\r\n  flex: 0 1 400px;\r\n  /* border: 1px solid black; */\r\n  border-top: 1px solid black;\r\n  border-left: 1px solid black;\r\n\r\n  user-select: none;\r\n}\r\n\r\ndialog {\r\n  text-align: center;\r\n  background-color: ghostwhite;\r\n  margin: auto;\r\n  border: none;\r\n  outline: none;\r\n  padding: 50px;\r\n}\r\n\r\n.cell {\r\n  flex: 0 0 40px;\r\n  border-right: 1px solid black;\r\n  border-bottom: 1px solid black;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.greenColor {\r\n  background-color: green;\r\n}\r\n\r\n.definitelyPlaced {\r\n  background-color: darkgreen;\r\n}\r\n"],sourceRoot:""}]);const s=a},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);t&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},354:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=t.base?c[0]+t.base:c[0],d=i[l]||0,p="".concat(l," ").concat(d);i[l]=d+1;var A=r(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(u);else{var h=o(u,t);t.byIndex=s,n.splice(s,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var i=t(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=r(i[a]);n[s].references--}for(var c=t(e,o),l=0;l<i.length;l++){var d=r(i[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=c}}},659:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var i=n[t]={id:t,exports:{}};return e[t](i,i.exports,r),i.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var n=r.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=t[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.nc=void 0;var t=r(72),o=r.n(t),i=r(825),a=r.n(i),s=r(659),c=r.n(s),l=r(56),d=r.n(l),p=r(540),A=r.n(p),u=r(113),h=r.n(u),g=r(992),f={};f.styleTagTransform=h(),f.setAttributes=d(),f.insert=c().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=A(),o()(g.A,f),g.A&&g.A.locals&&g.A.locals;class m{constructor(e,n,r,t){this.length=e,this.timesHit=0,this.hasBeenSunk=!1,this.startingCoordinate=n,this.identifier=r,this.type=t}hit(){this.timesHit+=1,this.isSunk()}isSunk(){return this.timesHit===this.length?(this.hasBeenSunk=!0,this.hasBeenSunk):this.hasBeenSunk}}class b{constructor(){this.board=function(){const e=[];for(let n=0;n<10;n++){e[n]=[];for(let r=0;r<10;r++)e[n][r]={coordinates:`${n},${r}`,isOccupied:!1,isHit:!1,occupier:null}}return e}(),this.ships=[],this.cellsHit=[]}#e(e,n,r){let t=!0;for(let o=n;o<n+r;o++)if(void 0===this.board[e][o]||this.board[e][o].isOccupied){t=!1;break}return t}#n(e,n,r){let t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.ships.length;const o=new m(e,n,t,r),i=+(n=n.split(","))[0],a=+n[1];if(this.#e(i,a,e)){for(let n=a;n<a+e;n++)this.board[i][n].isOccupied=!0,this.board[i][n].occupier=o.identifier;this.ships.push(o)}}#r(e,n,r){let t=!0;for(let o=e;o<e+r;o++)if(void 0===this.board[o]||this.board[o][n].isOccupied){t=!1;break}return t}#t(e,n,r){let t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.ships.length;const o=new m(e,n,t,r),i=+(n=n.split(","))[0],a=+n[1];if(this.#r(i,a,e)){for(let n=i;n<i+e;n++)this.board[n][a].isOccupied=!0,this.board[n][a].occupier=o.identifier;this.ships.push(o)}}placeShip(e,n,r,t){"horizontal"===r?this.#n(e,n,t):"vertical"===r&&this.#t(e,n,t)}updateCellsHit(){this.cellsHit=[];for(let e=0;e<10;e++)for(let n=0;n<10;n++)!0===this.board[e][n].isHit&&this.cellsHit.push(this.board[e][n].coordinates)}receiveAttack(e){const n=(e=e.split(","))[0],r=e[1];if(!0!==this.board[n][r].isHit&&(this.board[n][r].isHit=!0,this.cellsHit.push(e.join(",")),!0===this.board[n][r].isOccupied)){const e=this.board[n][r].occupier,t=this.ships.findIndex((n=>n.identifier===e));this.ships[t].hit()}}checkAllSunk(){let e=0,n=this.ships.length;return this.ships.forEach((n=>{!0===n.hasBeenSunk&&(e+=1)})),e===n}}class y{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"computer";this.name=e,this.gameboard=new b}placeAllShips(e){e.forEach((e=>{this.gameboard.placeShip(e.length,e.startingCoordinate,e.axis,e.type)}))}}var E=r(592),C={};function v(e){if(!e.length)return;const n=document.querySelector("dialog").querySelector("#shipName");n.style.textDecoration="underline",n.textContent=e[0].type}function x(e){const n=document.querySelector(".computer.board");n.innerHTML="",e.gameboard.board.forEach(((r,t)=>{r.forEach(((r,o)=>{const i=document.createElement("div");i.classList.add("cell"),i.style.height="40px",i.dataset.coordinates=`${t},${o}`,r.isOccupied&&e.gameboard.ships[r.occupier].isSunk()?i.style.backgroundColor="yellow":r.isOccupied&&r.isHit?i.style.backgroundColor="midnightBlue":!r.isOccupied&&r.isHit&&(i.style.backgroundColor="gray"),n.appendChild(i)}))}))}function B(e){const n=document.querySelector(".player.board");n.innerHTML="",e.gameboard.board.forEach(((r,t)=>{r.forEach(((r,o)=>{const i=document.createElement("div");i.classList.add("cell"),i.style.height="40px",i.dataset.coordinates=`${t},${o}`,r.isOccupied&&e.gameboard.ships[r.occupier].isSunk()?i.style.backgroundColor="yellow":r.isOccupied&&r.isHit?(i.style.backgroundColor="midnightBlue",i.style.color="yellow",i.textContent="HIT"):!r.isOccupied&&r.isHit?i.style.backgroundColor="gray":r.isOccupied&&(i.style.backgroundColor="midnightBlue"),n.appendChild(i)}))}))}function k(e,n,r){const t=[e-1,n],o=[e+1,n],i=[e,n-1],a=[e,n+1];let s=[];return t[0]<0||t[0]>9||t[1]<0||t[1]>9||s.push(t.join(",")),o[0]<0||o[0]>9||o[1]<0||o[1]>9||s.push(o.join(",")),i[0]<0||i[0]>9||i[1]<0||i[1]>9||s.push(i.join(",")),a[0]<0||a[0]>9||a[1]<0||a[1]>9||s.push(a.join(",")),s=s.filter((e=>!r.gameboard.cellsHit.includes(e))),s}C.styleTagTransform=h(),C.setAttributes=d(),C.insert=c().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=A(),o()(E.A,C),E.A&&E.A.locals&&E.A.locals;let S,w=[],H=[];const $=r.p+"ea9232e1a4e0e645ef4df0b3a2210220.mp3",T=r.p+"ba320d5b0b54658e943d16f5476accc2.mp3";function L(e){const n=document.querySelector("body"),r=new Audio($),t=new Audio(T);"computer"!==e.name?r.play():t.play(),n.innerHTML=`<h1>${e.name[0].toUpperCase()+e.name.slice(1)} won!</h1>`}function M(e,n){let r="player";const t=document.querySelector(".board.computer");function o(i){if("player"===r){const a=i.target.dataset.coordinates;if(n.gameboard.cellsHit.includes(a))return;if(n.gameboard.receiveAttack(a),x(n),n.gameboard.checkAllSunk())return void L(e);r="computer",t.removeEventListener("click",o),function(){if("computer"===r){const i=function(e){if(w.length>0){if(H.length>=2){console.log(H);let e=H[0],n=H[1];e=e.split(","),n=n.split(",");let r=e[0],t=n[0],o=e[1],i=n[1];if(r===t){console.log("ITS HORIZONTAL",r,t);for(let e=0;e<w.length;e++){let n=w[e];n=n.split(","),n[0]!==r&&(console.log("selective axis horizontal"),w.splice(e,1),e--)}}else if(o===i){console.log("ITS VERTICAL"),console.log(w,"ADJACENTS BEFORE SPLICE");for(let e=0;e<w.length;e++){let n=w[e];n=n.split(","),n[1]!==o&&(console.log("selective axis vertical"),w.splice(e,1),e--)}console.log(w,"ADJACENTS AFTER SPLICE")}}const n=w[w.length-1],r=n.split(","),t=+r[0],o=+r[1];if(e.gameboard.board[t][o].isOccupied){const r=e.gameboard.board[t][o].occupier,i=e.gameboard.ships[r];H.push(`${t},${o}`);let a=k(t,o,e);return w.pop(),w=w.concat(a),i.length-i.timesHit==1&&(w=[],H=[],S=void 0),console.log(w),n}return w.pop(),console.log(w),n}{let n,r,t;for(;!t||e.gameboard.cellsHit.includes(t);)n=Math.round(9*Math.random()),r=Math.round(9*Math.random()),t=`${n},${r}`;if(e.gameboard.board[n][r].isOccupied){H.push(`${n},${r}`);let t=k(n,r,e);w=w.concat(t),console.log(w)}return t}}(e);if(e.gameboard.receiveAttack(i),B(e),e.gameboard.checkAllSunk())return void L(n);r="player",t.addEventListener("click",o)}}()}}t.addEventListener("click",o)}r.p,r.p,r.p;var z=r(849),j={};j.styleTagTransform=h(),j.setAttributes=d(),j.insert=c().bind(null,"head"),j.domAPI=a(),j.insertStyleElement=A(),o()(z.A,j),z.A&&z.A.locals&&z.A.locals,async function(){"computer"===await new Promise(((e,n)=>{const r=document.querySelector("body"),t=document.createElement("dialog");t.innerHTML='\n    <div class="choices">\n      <div class="choice friend">Play with friend</div>\n      <div class="choice computer">Play with computer</div>\n    </div>\n  ',r.prepend(t),document.querySelector(".choices").addEventListener("click",(n=>{n.target.classList.contains("computer")?(t.close(),t.remove(),e("computer")):n.target.classList.contains("friend")&&(t.close(),t.remove(),e("friend"))})),t.showModal()}))&&async function(e){!function(e){document.querySelector("body").innerHTML+=`<div class="boards">\n        <div class="player">\n          <h3>${e}</h3>\n          <div class="player board"></div>\n        </div>\n        <div class="computer">\n          <h3>Computer</h3>\n          <div class="computer board"></div>\n        </div>\n      </div>`}(e);const n=new y(e),r=new y,t=await async function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Player";const n=new Promise(((n,r)=>{const t=document.querySelector("body"),o=document.createElement("dialog");o.innerHTML=`<button>Change to vertical</button><div>\n        <h3>${e}</h3>\n        <h3>Please place your <span id="shipName"></span></h3>\n        <div class="placeShip board"></div>\n      </div>`,t.prepend(o);let i="horizontal";console.log(i);const a=document.querySelector("dialog button");a.addEventListener("click",(e=>{"horizontal"===i?(a.textContent="Change to horizontal",i="vertical"):"vertical"===i&&(a.textContent="Change to vertical",i="horizontal")}));const s=document.querySelector(".placeShip.board");for(let e=0;e<10;e++)for(let n=0;n<10;n++){const r=document.createElement("div");r.classList.add("cell"),r.dataset.coordinates=`${e},${n}`,s.appendChild(r)}const c=document.querySelectorAll(".placeShip.board .cell"),l=[{type:"Carrier",length:5},{type:"Battleship",length:4},{type:"Cruiser",length:3},{type:"Submarine",length:3},{type:"Destroyer",length:2}];v(l);const d=[];c.forEach((e=>{e.addEventListener("mouseover",(()=>{const n=[],r=e.dataset.coordinates.split(","),t=Number(r[0]),o=Number(r[1]);if("horizontal"===i)for(let e=o;e<o+l[0].length&&!(e>9);e++)n.push(`${t},${e}`);else if("vertical"===i)for(let e=t;e<t+l[0].length&&!(e>9);e++)n.push(`${e},${o}`);n.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.add("greenColor")}))})),e.addEventListener("mouseout",(n=>{const r=[],t=e.dataset.coordinates.split(","),o=Number(t[0]),a=Number(t[1]);if("horizontal"===i)for(let e=a;e<a+l[0].length&&!(e>9);e++)r.push(`${o},${e}`);else if("vertical"===i)for(let e=o;e<o+l[0].length&&!(e>9);e++)r.push(`${e},${a}`);r.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.remove("greenColor")}))})),e.addEventListener("click",(r=>{const t=[],a=e.dataset.coordinates.split(","),s=Number(a[0]),c=Number(a[1]);if("horizontal"===i)for(let e=c;e<c+l[0].length;e++){if(e>9)return;t.push(`${s},${e}`)}else if("vertical"===i)for(let e=s;e<s+l[0].length;e++){if(e>9)return;t.push(`${e},${c}`)}let p=!0;if(t.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.contains("definitelyPlaced")&&(p=!1)})),!p)return;t.forEach((e=>{document.querySelector(`[data-coordinates="${e}"]`).classList.add("definitelyPlaced")}));const A={length:l[0].length,startingCoordinate:e.dataset.coordinates,axis:i,type:l[0].type};d.push(A),l.shift(),v(l),0===l.length&&(o.close(),o.remove(),n(d))}))})),o.showModal()}));return n}(e);n.placeAllShips(t),function(e){const n=[{type:"Carrier",length:5},{type:"Battleship",length:4},{type:"Cruiser",length:3},{type:"Submarine",length:3},{type:"Destroyer",length:2}];for(let r=0;r<n.length;r++){const t=Math.round(Math.random())?"vertical":"horizontal",o=`${Math.round(9*Math.random())},${Math.round(9*Math.random())}`;e.gameboard.placeShip(n[r].length,o,t,n[r].type),e.gameboard.ships.length!==r+1&&r--}console.log(e.gameboard.ships)}(r),B(n),x(r),console.log(n),console.log(r),M(n,r)}(await new Promise(((e,n)=>{const r=document.querySelector("body"),t=document.createElement("dialog");t.innerHTML='<form>\n      <label for="name">Name: </label>\n      <input type="text" id="name" required />\n      <button>Submit</button>\n    </form>',t.querySelector("form").addEventListener("submit",(n=>{n.preventDefault(),e(n.target.name.value),t.close(),t.remove()})),r.prepend(t),t.showModal()})))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,